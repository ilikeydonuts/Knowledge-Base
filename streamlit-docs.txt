"selection1": "API documentation",
"selection1_url": "https://docs.streamlit.io/library/api-reference",
"selection2": [
"name": "Get started",
"url": "https://docs.streamlit.io/library/get-started",
"page": "Documentation\nsearch\nSearch\ndescription\nStreamlit library\nGet started\nremove\nInstallation\nMain concepts\nCreate an app\nMultipage apps\nadd\nAPI reference\nadd\nAdvanced features\nadd\nComponents\nadd\nRoadmap\nopen_in_new\nChangelog\nCheat sheet\ncloud\nStreamlit Community Cloud\nGet started\nadd\nTrust and Security\nRelease notes\nopen_in_new\nTroubleshooting\nschool\nKnowledge base\nTutorials\nadd\nUsing Streamlit\nStreamlit Components\nInstalling dependencies\nDeployment issues\nHome/\nStreamlit library/\nGet started\nGet started\nThis Get Started guide explains how Streamlit works, how to install Streamlit on your preferred operating system, and how to create your first Streamlit app!\ndownloading\nInstallation helps you set up your virtual environment and walks you through installing Streamlit on Windows, macOS, and Linux. Regardless of which package management tool and OS you're using, we recommend running the commands on this page in a virtual environment.\ndescription\nMain concepts introduces you to Streamlit's data model and development flow. You'll learn what makes Streamlit the most powerful way to build data apps, including the ability to display and style data, draw charts and maps, add interactive widgets, customize app layouts, cache computation, and define themes.\nauto_awesome\nCreate an app using Streamlit's core features to fetch and cache data, draw charts, plot information on a map, and use interactive widgets, like a slider, to filter results.\nauto_stories\nMultipage apps teaches you how to add pages to your app, including how to define pages, structure and run multipage apps, and navigate between pages. Once you understand the basics, create your first multipage app based on the familiar streamlit hello command!\n30 Days of Streamlit 🎈\n30 Days of Streamlit 🎈 is a free, self-paced 30 day challenge that teaches you how to build and deploy data apps with Streamlit. Complete the daily challenges, share your solutions with us on Twitter and LinkedIn, and stop by the forum with any questions!\nStart the challenge\nWas this page helpful?\nthumb_up\nYes\nthumb_down\nNo\nedit\nSuggest edits\nforum\nStill have questions?\nOur forums are full of helpful information and Streamlit experts.\nPrevious:\nStreamlit library\nNext:\nInstallation\nHome\nContact Us\nCommunity\nCopyright © 2023, Streamlit Inc."
,
"name": "Installation",
"url": "https://docs.streamlit.io/library/get-started/installation",
"page": "Documentation\nsearch\nSearch\ndescription\nStreamlit library\nGet started\nremove\nInstallation\nMain concepts\nCreate an app\nMultipage apps\nadd\nAPI reference\nadd\nAdvanced features\nadd\nComponents\nadd\nRoadmap\nopen_in_new\nChangelog\nCheat sheet\ncloud\nStreamlit Community Cloud\nGet started\nadd\nTrust and Security\nRelease notes\nopen_in_new\nTroubleshooting\nschool\nKnowledge base\nTutorials\nadd\nUsing Streamlit\nStreamlit Components\nInstalling dependencies\nDeployment issues\nHome/\nStreamlit library/\nGet started/\nInstallation\nInstall Streamlit\nTable of contents\nPrerequisites\nInstall Streamlit on Windows\nInstall Streamlit on macOS/Linux\nPrerequisites\nBefore you get started, you're going to need a few things:\nYour favorite IDE or text editor\nPython 3.7 - Python 3.11\nPIP\nSet up your virtual environment\nRegardless of which package management tool you're using, we recommend running the commands on this page in a virtual environment. This ensures that the dependencies pulled in for Streamlit don't impact any other Python projects you're working on.\nBelow are a few tools you can use for environment management:\npipenv\npoetry\nvenv\nvirtualenv\nconda\nInstall Streamlit on Windows\nStreamlit's officially-supported environment manager on Windows is Anaconda Navigator.\nInstall Anaconda\nIf you don't have Anaconda install yet, follow the steps provided on the Anaconda installation page.\nCreate a new environment with Streamlit\nNext you'll need to set up your environment.\nFollow the steps provided by Anaconda to set up and manage your environment using the Anaconda Navigator.\nSelect the \"▶\" icon next to your new environment. Then select \"Open terminal\":\nIn the terminal that appears, type:\npip install streamlit\nTest that the installation worked:\nstreamlit hello\nStreamlit's Hello app should appear in a new tab in your web browser!\nUse your new environment\nIn Anaconda Navigator, open a terminal in your environment (see step 2 above).\nIn the terminal that appears, use Streamlit as usual:\nstreamlit run myfile.py\nInstall Streamlit on macOS/Linux\nStreamlit's officially-supported environment manager for macOS and Linux is Pipenv. See instructions on how to install and use it below.\nInstall Pipenv\nInstall pip. More details about installing pip can be found in pip's documentation.\nOn a macOS:\npython -m ensurepip --upgrade\nOn Ubuntu with Python 3:\nsudo apt-get install python3-pip\nFor other Linux distributions, see How to install PIP for Python.\nInstall pipenv.\npip3 install pipenv\nInstall Xcode command line tools on macOS\nOn macOS, you'll need to install Xcode command line tools. They are required to compile some of Streamlit's Python dependencies during installation. To install Xcode command line tools, run:\nxcode-select --install\nCreate a new environment with Streamlit\nNavigate to your project folder:\ncd myproject\nCreate a new Pipenv environment in that folder and activate that environment:\npipenv shell\nWhen you run the command above, a file called Pipfile will appear in myprojects/. This file is where your Pipenv environment and its dependencies are declared.\nInstall Streamlit in your environment:\npip install streamlit\nOr if you want to create an easily-reproducible environment, replace pip with pipenv every time you install something:\npipenv install streamlit\nTest that the installation worked:\nstreamlit hello\nStreamlit's Hello app should appear in a new tab in your web browser!\nUse your new environment\nAny time you want to use the new environment, you first need to go to your project folder (where the Pipenv file lives) and run:\npipenv shell\nNow you can use Python and Streamlit as usual:\nstreamlit run myfile.py\nTo stop the Streamlit server, press ctrl-C.\nWhen you're done using this environment, just type exit or press ctrl-D to return to your normal shell.\nNow that you've installed Streamlit, take a few minutes to read through Main concepts to understand Streamlit's data flow model.\nWas this page helpful?\nthumb_up\nYes\nthumb_down\nNo\nedit\nSuggest edits\nforum\nStill have questions?\nOur forums are full of helpful information and Streamlit experts.\nPrevious:\nGet started\nNext:\nMain concepts\nHome\nContact Us\nCommunity\nCopyright © 2023, Streamlit Inc."
"name": "Main concepts",
"url": "https://docs.streamlit.io/library/get-started/main-concepts",
"page": "Documentation\nsearch\nSearch\ndescription\nStreamlit library\nGet started\nremove\nInstallation\nMain concepts\nCreate an app\nMultipage apps\nadd\nAPI reference\nadd\nAdvanced features\nadd\nComponents\nadd\nRoadmap\nopen_in_new\nChangelog\nCheat sheet\ncloud\nStreamlit Community Cloud\nGet started\nadd\nTrust and Security\nRelease notes\nopen_in_new\nTroubleshooting\nschool\nKnowledge base\nTutorials\nadd\nUsing Streamlit\nStreamlit Components\nInstalling dependencies\nDeployment issues\nHome/\nStreamlit library/\nGet started/\nMain concepts\nMain concepts\nWorking with Streamlit is simple. First you sprinkle a few Streamlit commands into a normal Python script, then you run it with streamlit run:\nstreamlit run your_script.py [-- script args]\nAs soon as you run the script as shown above, a local Streamlit server will spin up and your app will open in a new tab in your default web browser. The app is your canvas, where you'll draw charts, text, widgets, tables, and more.\nWhat gets drawn in the app is up to you. For example st.text writes raw text to your app, and st.line_chart draws — you guessed it — a line chart. Refer to our API documentation to see all commands that are available to you.\npush_pin\nNote\nWhen passing your script some custom arguments, they must be passed after two dashes. Otherwise the arguments get interpreted as arguments to Streamlit itself.\nAnother way of running Streamlit is to run it as a Python module. This can be useful when configuring an IDE like PyCharm to work with Streamlit:\n# Running\npython -m streamlit run your_script.py\n# is equivalent to:\nstreamlit run your_script.py\nstar\nTip\nYou can also pass a URL to streamlit run! This is great when combined with GitHub Gists. For example:\nstreamlit run https://raw.githubusercontent.com/streamlit/demo-uber-nyc-pickups/master/streamlit_app.py\nDevelopment flow\nEvery time you want to update your app, save the source file. When you do that, Streamlit detects if there is a change and asks you whether you want to rerun your app. Choose \"Always rerun\" at the top-right of your screen to automatically update your app every time you change its source code.\nThis allows you to work in a fast interactive loop: you type some code, save it, try it out live, then type some more code, save it, try it out, and so on until you're happy with the results. This tight loop between coding and viewing results live is one of the ways Streamlit makes your life easier.\nstar\nTip\nWhile developing a Streamlit app, it's recommended to lay out your editor and browser windows side by side, so the code and the app can be seen at the same time. Give it a try!\nAs of Streamlit version 1.10.0 and higher, Streamlit apps cannot be run from the root directory of Linux distributions. If you try to run a Streamlit app from the root directory, Streamlit will throw a FileNotFoundError: [Errno 2] No such file or directory error. For more information, see GitHub issue #5239.\nIf you are using Streamlit version 1.10.0 or higher, your main script should live in a directory other than the root directory. When using Docker, you can use the WORKDIR command to specify the directory where your main script lives. For an example of how to do this, read Create a Dockerfile.\nData flow\nStreamlit's architecture allows you to write apps the same way you write plain Python scripts. To unlock this, Streamlit apps have a unique data flow: any time something must be updated on the screen, Streamlit reruns your entire Python script from top to bottom.\nThis can happen in two situations:\nWhenever you modify your app's source code.\nWhenever a user interacts with widgets in the app. For example, when dragging a slider, entering text in an input box, or clicking a button.\nWhenever a callback is passed to a widget via the on_change (or on_click) parameter, the callback will always run before the rest of your script. For details on the Callbacks API, please refer to our Session State API Reference Guide.\nAnd to make all of this fast and seamless, Streamlit does some heavy lifting for you behind the scenes. A big player in this story is the @st.cache_data decorator, which allows developers to skip certain costly computations when their apps rerun. We'll cover caching later in this page.\nDisplay and style data\nThere are a few ways to display data (tables, arrays, data frames) in Streamlit apps. Below, you will be introduced to magic and st.write(), which can be used to write anything from text to tables. After that, let's take a look at methods designed specifically for visualizing data.\nUse magic\nYou can also write to your app without calling any Streamlit methods. Streamlit supports \"magic commands,\" which means you don't have to use st.write() at all! To see this in action try this snippet:\n\"\"\"\n# My first app\nHere's our first attempt at using data to create a table:\n\"\"\"\nimport streamlit as st\nimport pandas as pd\ndf = pd.DataFrame(\n'first column': [1, 2, 3, 4],\n'second column': [10, 20, 30, 40]\n)\ndf\nAny time that Streamlit sees a variable or a literal value on its own line, it automatically writes that to your app using st.write(). For more information, refer to the documentation on magic commands.\nWrite a data frame\nAlong with magic commands, st.write() is Streamlit's \"Swiss Army knife\". You can pass almost anything to st.write(): text, data, Matplotlib figures, Altair charts, and more. Don't worry, Streamlit will figure it out and render things the right way.\nimport streamlit as st\nimport pandas as pd\nst.write(\"Here's our first attempt at using data to create a table:\")\nst.write(pd.DataFrame(\n'first column': [1, 2, 3, 4],\n'second column': [10, 20, 30, 40]\n))\nThere are other data specific functions like st.dataframe() and st.table() that you can also use for displaying data. Let's understand when to use these features and how to add colors and styling to your data frames.\nYou might be asking yourself, \"why wouldn't I always use st.write()?\" There are a few reasons:\nMagic and st.write() inspect the type of data that you've passed in, and then decide how to best render it in the app. Sometimes you want to draw it another way. For example, instead of drawing a dataframe as an interactive table, you may want to draw it as a static table by using st.table(df).\nThe second reason is that other methods return an object that can be used and modified, either by adding data to it or replacing it.\nFinally, if you use a more specific Streamlit method you can pass additional arguments to customize its behavior.\nFor example, let's create a data frame and change its formatting with a Pandas Styler object. In this example, you'll use Numpy to generate a random sample, and the st.dataframe() method to draw an interactive table.\npush_pin\nNote\nThis example uses Numpy to generate a random sample, but you can use Pandas DataFrames, Numpy arrays, or plain Python arrays.\nimport streamlit as st\nimport numpy as np\ndataframe = np.random.randn(10, 20)\nst.dataframe(dataframe)\nLet's expand on the first example using the Pandas Styler object to highlight some elements in the interactive table.\nimport streamlit as st\nimport numpy as np\nimport pandas as pd\ndataframe = pd.DataFrame(\nnp.random.randn(10, 20),\ncolumns=('col %d' % i for i in range(20)))\nst.dataframe(dataframe.style.highlight_max(axis=0))\nStreamlit also has a method for static table generation: st.table().\nimport streamlit as st\nimport numpy as np\nimport pandas as pd\ndataframe = pd.DataFrame(\nnp.random.randn(10, 20),\ncolumns=('col %d' % i for i in range(20)))\nst.table(dataframe)\nDraw charts and maps\nStreamlit supports several popular data charting libraries like Matplotlib, Altair, deck.gl, and more. In this section, you'll add a bar chart, line chart, and a map to your app.\nDraw a line chart\nYou can easily add a line chart to your app with st.line_chart(). We'll generate a random sample using Numpy and then chart it.\nimport streamlit as st\nimport numpy as np\nimport pandas as pd\nchart_data = pd.DataFrame(\nnp.random.randn(20, 3),\ncolumns=['a', 'b', 'c'])\nst.line_chart(chart_data)\nPlot a map\nWith st.map() you can display data points on a map. Let's use Numpy to generate some sample data and plot it on a map of San Francisco.\nimport streamlit as st\nimport numpy as np\nimport pandas as pd\nmap_data = pd.DataFrame(\nnp.random.randn(1000, 2) / [50, 50] + [37.76, -122.4],\ncolumns=['lat', 'lon'])\nst.map(map_data)\nWidgets\nWhen you've got the data or model into the state that you want to explore, you can add in widgets like st.slider(), st.button() or st.selectbox(). It's really straightforward — treat widgets as variables:\nimport streamlit as st\nx = st.slider('x') # 👈 this is a widget\nst.write(x, 'squared is', x * x)\nOn first run, the app above should output the text \"0 squared is 0\". Then every time a user interacts with a widget, Streamlit simply reruns your script from top to bottom, assigning the current state of the widget to your variable in the process.\nFor example, if the user moves the slider to position 10, Streamlit will rerun the code above and set x to 10 accordingly. So now you should see the text \"10 squared is 100\".\nWidgets can also be accessed by key, if you choose to specify a string to use as the unique key for the widget:\nimport streamlit as st\nst.text_input(\"Your name\", key=\"name\")\n# You can access the value at any point with:\nst.session_state.name\nEvery widget with a key is automatically added to Session State. For more information about Session State, its association with widget state, and its limitations, see Session State API Reference Guide.\nUse checkboxes to show/hide data\nOne use case for checkboxes is to hide or show a specific chart or section in an app. st.checkbox() takes a single argument, which is the widget label. In this sample, the checkbox is used to toggle a conditional statement.\nimport streamlit as st\nimport numpy as np\nimport pandas as pd\nif st.checkbox('Show dataframe'):\nchart_data = pd.DataFrame(\nnp.random.randn(20, 3),\ncolumns=['a', 'b', 'c'])\nchart_data\nUse a selectbox for options\nUse st.selectbox to choose from a series. You can write in the options you want, or pass through an array or data frame column.\nLet's use the df data frame we created earlier.\nimport streamlit as st\nimport pandas as pd\ndf = pd.DataFrame(\n'first column': [1, 2, 3, 4],\n'second column': [10, 20, 30, 40]\n)\noption = st.selectbox(\n'Which number do you like best?',\ndf['first column'])\n'You selected: ', option\nLayout\nStreamlit makes it easy to organize your widgets in a left panel sidebar with st.sidebar. Each element that's passed to st.sidebar is pinned to the left, allowing users to focus on the content in your app while still having access to UI controls.\nFor example, if you want to add a selectbox and a slider to a sidebar, use st.sidebar.slider and st.sidebar.selectbox instead of st.slider and st.selectbox:\nimport streamlit as st\n# Add a selectbox to the sidebar:\nadd_selectbox = st.sidebar.selectbox(\n'How would you like to be contacted?',\n('Email', 'Home phone', 'Mobile phone')\n)\n# Add a slider to the sidebar:\nadd_slider = st.sidebar.slider(\n'Select a range of values',\n0.0, 100.0, (25.0, 75.0)\n)\nBeyond the sidebar, Streamlit offers several other ways to control the layout of your app. st.columns lets you place widgets side-by-side, and st.expander lets you conserve space by hiding away large content.\nimport streamlit as st\nleft_column, right_column = st.columns(2)\n# You can use a column just like st.sidebar:\nleft_column.button('Press me!')\n# Or even better, call Streamlit functions inside a \"with\" block:\nwith right_column:\nchosen = st.radio(\n'Sorting hat',\n(\"Gryffindor\", \"Ravenclaw\", \"Hufflepuff\", \"Slytherin\"))\nst.write(f\"You are in chosen house!\")\npush_pin\nNote\nst.echo and st.spinner are not currently supported inside the sidebar or layout options. Rest assured, though, we're currently working on adding support for those too!\nShow progress\nWhen adding long running computations to an app, you can use st.progress() to display status in real time.\nFirst, let's import time. We're going to use the time.sleep() method to simulate a long running computation:\nimport time\nNow, let's create a progress bar:\nimport streamlit as st\nimport time\n'Starting a long computation...'\n# Add a placeholder\nlatest_iteration = st.empty()\nbar = st.progress(0)\nfor i in range(100):\n# Update the progress bar with each iteration.\nlatest_iteration.text(f'Iteration i+1')\nbar.progress(i + 1)\ntime.sleep(0.1)\n'...and now we\\'re done!'\nThemes\nStreamlit supports Light and Dark themes out of the box. Streamlit will first check if the user viewing an app has a Light or Dark mode preference set by their operating system and browser. If so, then that preference will be used. Otherwise, the Light theme is applied by default.\nYou can also change the active theme from \"☰\" → \"Settings\".\nWant to add your own theme to an app? The \"Settings\" menu has a theme editor accessible by clicking on \"Edit active theme\". You can use this editor to try out different colors and see your app update live.\nWhen you're happy with your work, themes can be saved by setting config options in the [theme] config section. After you've defined a theme for your app, it will appear as \"Custom Theme\" in the theme selector and will be applied by default instead of the included Light and Dark themes.\nMore information about the options available when defining a theme can be found in the theme option documentation.\npush_pin\nNote\nThe theme editor menu is available only in local development. If you've deployed your app using Streamlit Community Cloud, the \"Edit active theme\" button will no longer be displayed in the \"Settings\" menu.\nstar\nTip\nAnother way to experiment with different theme colors is to turn on the \"Run on save\" option, edit your config.toml file, and watch as your app reruns with the new theme colors applied.\nCaching\nThe Streamlit cache allows your app to stay performant even when loading data from the web, manipulating large datasets, or performing expensive computations.\nThe basic idea behind caching is to store the results of expensive function calls and return the cached result when the same inputs occur again rather than calling the function on subsequent runs.\nTo cache a function in Streamlit, you need to decorate it with one of two decorators (st.cache_data and st.cache_resource):\n@st.cache_data\ndef long_running_function(param1, param2):\nreturn …\nIn this example, decorating long_running_function with @st.cache_data tells Streamlit that whenever the function is called, it checks two things:\nThe values of the input parameters (in this case, param1 and param2).\nThe code inside the function.\nIf this is the first time Streamlit sees these parameter values and function code, it runs the function and stores the return value in a cache. The next time the function is called with the same parameters and code (e.g., when a user interacts with the app), Streamlit will skip executing the function altogether and return the cached value instead. During development, the cache updates automatically as the function code changes, ensuring that the latest changes are reflected in the cache.\nAs mentioned, there are two caching decorators:\nst.cache_data is the recommended way to cache computations that return data: loading a DataFrame from CSV, transforming a NumPy array, querying an API, or any other function that returns a serializable data object (str, int, float, DataFrame, array, list, …). It creates a new copy of the data at each function call, making it safe against mutations and race conditions. The behavior of st.cache_data is what you want in most cases – so if you're unsure, start with st.cache_data and see if it works!\nst.cache_resource is the recommended way to cache global resources like ML models or database connections – unserializable objects that you don’t want to load multiple times. Using it, you can share these resources across all reruns and sessions of an app without copying or duplication. Note that any mutations to the cached return value directly mutate the object in the cache (more details below).\nStreamlit's two caching decorators and their use cases.\nFor more information about the Streamlit caching decorators, their configuration parameters, and their limitations, see Caching.\nPages\nAs apps grow large, it becomes useful to organize them into multiple pages. This makes the app easier to manage as a developer and easier to navigate as a user. Streamlit provides a frictionless way to create multipage apps.\nWe designed this feature so that building a multipage app is as easy as building a single-page app! Just add more pages to an existing app as follows:\nIn the folder containing your main script, create a new pages folder. Let’s say your main script is named main_page.py.\nAdd new .py files in the pages folder to add more pages to your app.\nRun streamlit run main_page.py as usual.\nThat’s it! The main_page.py script will now correspond to the main page of your app. And you’ll see the other scripts from the pages folder in the sidebar page selector. For example:\nmain_page.py\nimport streamlit as st\nst.markdown(\"# Main page 🎈\")\nst.sidebar.markdown(\"# Main page 🎈\")\npages/page_2.py\nimport streamlit as st\nst.markdown(\"# Page 2 ❄️\")\nst.sidebar.markdown(\"# Page 2 ❄️\")\npages/page_3.py\nimport streamlit as st\nst.markdown(\"# Page 3 🎉\")\nst.sidebar.markdown(\"# Page 3 🎉\")\nNow run streamlit run main_page.py and view your shiny new multipage app!\nOur documentation on Multipage apps teaches you how to add pages to your app, including how to define pages, structure and run multipage apps, and navigate between pages. Once you understand the basics, create your first multipage app!\nApp model\nNow that you know a little more about all the individual pieces, let's close the loop and review how it works together:\nStreamlit apps are Python scripts that run from top to bottom\nEvery time a user opens a browser tab pointing to your app, the script is re-executed\nAs the script executes, Streamlit draws its output live in a browser\nScripts use the Streamlit cache to avoid recomputing expensive functions, so updates happen very fast\nEvery time a user interacts with a widget, your script is re-executed and the output value of that widget is set to the new value during that run.\nStreamlit apps can contain multiple pages, which are defined in separate .py files in a pages folder.\nWas this page helpful?\nthumb_up\nYes\nthumb_down\nNo\nedit\nSuggest edits\nforum\nStill have questions?\nOur forums are full of helpful information and Streamlit experts.\nPrevious:\nInstallation\nNext:\nCreate an app\nHome\nContact Us\nCommunity\nCopyright © 2023, Streamlit Inc."
"name": "Create an app",
"url": "https://docs.streamlit.io/library/get-started/create-an-app",
"page": "Documentation\nsearch\nSearch\ndescription\nStreamlit library\nGet started\nremove\nInstallation\nMain concepts\nCreate an app\nMultipage apps\nadd\nAPI reference\nadd\nAdvanced features\nadd\nComponents\nadd\nRoadmap\nopen_in_new\nChangelog\nCheat sheet\ncloud\nStreamlit Community Cloud\nGet started\nadd\nTrust and Security\nRelease notes\nopen_in_new\nTroubleshooting\nschool\nKnowledge base\nTutorials\nadd\nUsing Streamlit\nStreamlit Components\nInstalling dependencies\nDeployment issues\nHome/\nStreamlit library/\nGet started/\nCreate an app\nCreate an app\nIf you've made it this far, chances are you've installed Streamlit and run through the basics in our Main concepts guide. If not, now is a good time to take a look.\nThe easiest way to learn how to use Streamlit is to try things out yourself. As you read through this guide, test each method. As long as your app is running, every time you add a new element to your script and save, Streamlit's UI will ask if you'd like to rerun the app and view the changes. This allows you to work in a fast interactive loop: you write some code, save it, review the output, write some more, and so on, until you're happy with the results. The goal is to use Streamlit to create an interactive app for your data or model and along the way to use Streamlit to review, debug, perfect, and share your code.\nIn this guide, you're going to use Streamlit's core features to create an interactive app; exploring a public Uber dataset for pickups and drop-offs in New York City. When you're finished, you'll know how to fetch and cache data, draw charts, plot information on a map, and use interactive widgets, like a slider, to filter results.\nstar\nTip\nIf you'd like to skip ahead and see everything at once, the complete script is available below.\nCreate your first app\nStreamlit is more than just a way to make data apps, it’s also a community of creators that share their apps and ideas and help each other make their work better. Please come join us on the community forum. We love to hear your questions, ideas, and help you work through your bugs — stop by today!\nThe first step is to create a new Python script. Let's call it uber_pickups.py.\nOpen uber_pickups.py in your favorite IDE or text editor, then add these lines:\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nEvery good app has a title, so let's add one:\nst.title('Uber pickups in NYC')\nNow it's time to run Streamlit from the command line:\nstreamlit run uber_pickups.py\nRunning a Streamlit app is no different than any other Python script. Whenever you need to view the app, you can use this command.\nstar\nTip\nDid you know you can also pass a URL to streamlit run? This is great when combined with GitHub Gists. For example:\nstreamlit run https://raw.githubusercontent.com/streamlit/demo-uber-nyc-pickups/master/streamlit_app.py\nAs usual, the app should automatically open in a new tab in your browser.\nFetch some data\nNow that you have an app, the next thing you'll need to do is fetch the Uber dataset for pickups and drop-offs in New York City.\nLet's start by writing a function to load the data. Add this code to your script:\nDATE_COLUMN = 'date/time'\nDATA_URL = ('https://s3-us-west-2.amazonaws.com/'\n'streamlit-demo-data/uber-raw-data-sep14.csv.gz')\ndef load_data(nrows):\ndata = pd.read_csv(DATA_URL, nrows=nrows)\nlowercase = lambda x: str(x).lower()\ndata.rename(lowercase, axis='columns', inplace=True)\ndata[DATE_COLUMN] = pd.to_datetime(data[DATE_COLUMN])\nreturn data\nYou'll notice that load_data is a plain old function that downloads some data, puts it in a Pandas dataframe, and converts the date column from text to datetime. The function accepts a single parameter (nrows), which specifies the number of rows that you want to load into the dataframe.\nNow let's test the function and review the output. Below your function, add these lines:\n# Create a text element and let the reader know the data is loading.\ndata_load_state = st.text('Loading data...')\n# Load 10,000 rows of data into the dataframe.\ndata = load_data(10000)\n# Notify the reader that the data was successfully loaded.\ndata_load_state.text('Loading data...done!')\nYou'll see a few buttons in the upper-right corner of your app asking if you'd like to rerun the app. Choose Always rerun, and you'll see your changes automatically each time you save.\nOk, that's underwhelming...\nIt turns out that it takes a long time to download data, and load 10,000 lines into a dataframe. Converting the date column into datetime isn’t a quick job either. You don’t want to reload the data each time the app is updated – luckily Streamlit allows you to cache the data.\nEffortless caching\nTry adding @st.cache_data before the load_data declaration:\n@st.cache_data\ndef load_data(nrows):\nThen save the script, and Streamlit will automatically rerun your app. Since this is the first time you’re running the script with @st.cache_data, you won't see anything change. Let’s tweak your file a little bit more so that you can see the power of caching.\nReplace the line data_load_state.text('Loading data...done!') with this:\ndata_load_state.text(\"Done! (using st.cache_data)\")\nNow save. See how the line you added appeared immediately? If you take a step back for a second, this is actually quite amazing. Something magical is happening behind the scenes, and it only takes one line of code to activate it.\nHow's it work?\nLet's take a few minutes to discuss how @st.cache_data actually works.\nWhen you mark a function with Streamlit’s cache annotation, it tells Streamlit that whenever the function is called that it should check two things:\nThe input parameters you used for the function call.\nThe code inside the function.\nIf this is the first time Streamlit has seen both these items, with these exact values, and in this exact combination, it runs the function and stores the result in a local cache. The next time the function is called, if the two values haven't changed, then Streamlit knows it can skip executing the function altogether. Instead, it reads the output from the local cache and passes it on to the caller -- like magic.\n\"But, wait a second,\" you’re saying to yourself, \"this sounds too good to be true. What are the limitations of all this awesomesauce?\"\nWell, there are a few:\nStreamlit will only check for changes within the current working directory. If you upgrade a Python library, Streamlit's cache will only notice this if that library is installed inside your working directory.\nIf your function is not deterministic (that is, its output depends on random numbers), or if it pulls data from an external time-varying source (for example, a live stock market ticker service) the cached value will be none-the-wiser.\nLastly, you should avoid mutating the output of a function cached with st.cache_data since cached values are stored by reference.\nWhile these limitations are important to keep in mind, they tend not to be an issue a surprising amount of the time. Those times, this cache is really transformational.\nstar\nTip\nWhenever you have a long-running computation in your code, consider refactoring it so you can use @st.cache_data, if possible. Please read Caching for more details.\nNow that you know how caching with Streamlit works, let’s get back to the Uber pickup data.\nInspect the raw data\nIt's always a good idea to take a look at the raw data you're working with before you start working with it. Let's add a subheader and a printout of the raw data to the app:\nst.subheader('Raw data')\nst.write(data)\nIn the Main concepts guide you learned that st.write will render almost anything you pass to it. In this case, you're passing in a dataframe and it's rendering as an interactive table.\nst.write tries to do the right thing based on the data type of the input. If it isn't doing what you expect you can use a specialized command like st.dataframe instead. For a full list, see API reference.\nDraw a histogram\nNow that you've had a chance to take a look at the dataset and observe what's available, let's take things a step further and draw a histogram to see what Uber's busiest hours are in New York City.\nTo start, let's add a subheader just below the raw data section:\nst.subheader('Number of pickups by hour')\nUse NumPy to generate a histogram that breaks down pickup times binned by hour:\nhist_values = np.histogram(\ndata[DATE_COLUMN].dt.hour, bins=24, range=(0,24))[0]\nNow, let's use Streamlit's st.bar_chart() method to draw this histogram.\nst.bar_chart(hist_values)\nSave your script. This histogram should show up in your app right away. After a quick review, it looks like the busiest time is 17:00 (5 P.M.).\nTo draw this diagram we used Streamlit's native bar_chart() method, but it's important to know that Streamlit supports more complex charting libraries like Altair, Bokeh, Plotly, Matplotlib and more. For a full list, see supported charting libraries.\nPlot data on a map\nUsing a histogram with Uber's dataset helped us determine what the busiest times are for pickups, but what if we wanted to figure out where pickups were concentrated throughout the city. While you could use a bar chart to show this data, it wouldn't be easy to interpret unless you were intimately familiar with latitudinal and longitudinal coordinates in the city. To show pickup concentration, let's use Streamlit st.map() function to overlay the data on a map of New York City.\nAdd a subheader for the section:\nst.subheader('Map of all pickups')\nUse the st.map() function to plot the data:\nst.map(data)\nSave your script. The map is fully interactive. Give it a try by panning or zooming in a bit.\nAfter drawing your histogram, you determined that the busiest hour for Uber pickups was 17:00. Let's redraw the map to show the concentration of pickups at 17:00.\nLocate the following code snippet:\nst.subheader('Map of all pickups')\nst.map(data)\nReplace it with:\nhour_to_filter = 17\nfiltered_data = data[data[DATE_COLUMN].dt.hour == hour_to_filter]\nst.subheader(f'Map of all pickups at hour_to_filter:00')\nst.map(filtered_data)\nYou should see the data update instantly.\nTo draw this map we used the st.map function that's built into Streamlit, but if you'd like to visualize complex map data, we encourage you to take a look at the st.pydeck_chart.\nFilter results with a slider\nIn the last section, when you drew the map, the time used to filter results was hardcoded into the script, but what if we wanted to let a reader dynamically filter the data in real time? Using Streamlit's widgets you can. Let's add a slider to the app with the st.slider() method.\nLocate hour_to_filter and replace it with this code snippet:\nhour_to_filter = st.slider('hour', 0, 23, 17) # min: 0h, max: 23h, default: 17h\nUse the slider and watch the map update in real time.\nUse a button to toggle data\nSliders are just one way to dynamically change the composition of your app. Let's use the st.checkbox function to add a checkbox to your app. We'll use this checkbox to show/hide the raw data table at the top of your app.\nLocate these lines:\nst.subheader('Raw data')\nst.write(data)\nReplace these lines with the following code:\nif st.checkbox('Show raw data'):\nst.subheader('Raw data')\nst.write(data)\nWe're sure you've got your own ideas. When you're done with this tutorial, check out all the widgets that Streamlit exposes in our API Reference.\nLet's put it all together\nThat's it, you've made it to the end. Here's the complete script for our interactive app.\nstar\nTip\nIf you've skipped ahead, after you've created your script, the command to run Streamlit is streamlit run [app name].\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nst.title('Uber pickups in NYC')\nDATE_COLUMN = 'date/time'\nDATA_URL = ('https://s3-us-west-2.amazonaws.com/'\n'streamlit-demo-data/uber-raw-data-sep14.csv.gz')\n@st.cache_data\ndef load_data(nrows):\ndata = pd.read_csv(DATA_URL, nrows=nrows)\nlowercase = lambda x: str(x).lower()\ndata.rename(lowercase, axis='columns', inplace=True)\ndata[DATE_COLUMN] = pd.to_datetime(data[DATE_COLUMN])\nreturn data\ndata_load_state = st.text('Loading data...')\ndata = load_data(10000)\ndata_load_state.text(\"Done! (using st.cache_data)\")\nif st.checkbox('Show raw data'):\nst.subheader('Raw data')\nst.write(data)\nst.subheader('Number of pickups by hour')\nhist_values = np.histogram(data[DATE_COLUMN].dt.hour, bins=24, range=(0,24))[0]\nst.bar_chart(hist_values)\n# Some number in the range 0-23\nhour_to_filter = st.slider('hour', 0, 23, 17)\nfiltered_data = data[data[DATE_COLUMN].dt.hour == hour_to_filter]\nst.subheader('Map of all pickups at %s:00' % hour_to_filter)\nst.map(filtered_data)\nShare your app\nAfter you’ve built a Streamlit app, it's time to share it! To show it off to the world you can use Streamlit Community Cloud to deploy, manage, and share your app for free.\nIt works in 3 simple steps:\nPut your app in a public GitHub repo (and make sure it has a requirements.txt!)\nSign into share.streamlit.io\nClick 'Deploy an app' and then paste in your GitHub URL\nThat's it! 🎈 You now have a publicly deployed app that you can share with the world. Click to learn more about how to use Streamlit Community Cloud.\nGet help\nThat's it for getting started, now you can go and build your own apps! If you run into difficulties here are a few things you can do.\nCheck out our community forum and post a question\nQuick help from command line with streamlit help\nGo through our Knowledge Base for tips, step-by-step tutorials, and articles that answer your questions about creating and deploying Streamlit apps.\nRead more documentation! Check out:\nAdvanced features for things like caching, theming, and adding statefulness to apps.\nAPI reference for examples of every Streamlit command.\nWas this page helpful?\nthumb_up\nYes\nthumb_down\nNo\nedit\nSuggest edits\nforum\nStill have questions?\nOur forums are full of helpful information and Streamlit experts.\nPrevious:\nMain concepts\nNext:\nMultipage apps\nHome\nContact Us\nCommunity\nCopyright © 2023, Streamlit Inc."
"name": "Multipage apps",
"url": "https://docs.streamlit.io/library/get-started/multipage-apps",
"page": "Documentation\nsearch\nSearch\ndescription\nStreamlit library\nGet started\nremove\nInstallation\nMain concepts\nCreate an app\nMultipage apps\nremove\nCreate a multipage app\nAPI reference\nadd\nAdvanced features\nadd\nComponents\nadd\nRoadmap\nopen_in_new\nChangelog\nCheat sheet\ncloud\nStreamlit Community Cloud\nGet started\nadd\nTrust and Security\nRelease notes\nopen_in_new\nTroubleshooting\nschool\nKnowledge base\nTutorials\nadd\nUsing Streamlit\nStreamlit Components\nInstalling dependencies\nDeployment issues\nHome/\nStreamlit library/\nGet started/\nMultipage apps\nMultipage apps\nAs apps grow large, it becomes useful to organize them into multiple pages. This makes the app easier to manage as a developer and easier to navigate as a user. Streamlit provides a frictionless way to create multipage apps. Pages are automatically shown in a nice navigation widget inside the app sidebar, and clicking on a page will navigate to the page without reloading the frontend — making app browsing incredibly fast!\nWe created a \"single-page app\" to explore a public Uber dataset for pickups and drop-offs in New York City on the previous page. In this guide, let’s learn how to create multipage apps. Once we have a solid foundation on what it takes to create multipage apps, let’s build one for ourselves in the next section!\nStructuring multipage apps\nLet's understand what it takes to create multipage apps — including how to define pages, structure and run multipage apps, and navigate between pages in the user interface. Once you've understood the basics, you can jump right into the next section to convert the familiar streamlit hello command into a multipage app!\nRun a multipage app\nRunning a multipage app is identical to running a single-page app. The command to run a multipage app is:\nstreamlit run [entrypoint file]\nThe \"entrypoint file\" is the first page the app will show to the user. Once you have added pages to your app, the entrypoint file appears as the top-most page in the sidebar. You can think of the entrypoint file as your app's \"main page\". For example, say your entrypoint file is Home.py. Then, to run your app, you can run streamlit run Home.py. This will start your app and execute the code in Home.py.\nAdding pages\nOnce you've created your entrypoint file, you can add pages by creating .py files in a pages/ directory relative to your entrypoint file. For example, if your entrypoint file is Home.py, then you can create a pages/About.py file to define the \"About\" page. Here's a valid directory structure for a multipage app:\nHome.py # This is the file you run with \"streamlit run\"\n└─── pages/\n└─── About.py # This is a page\n└─── 2_Page_two.py # This is another page\n└─── 3_😎_three.py # So is this\nstar\nTip\nWhen adding emojis to filenames, it’s best practice to include a numbered-prefix to make autocompletion in your terminal easier. Terminal-autocomplete can get confused by unicode (which is how emojis are represented).\nPages are defined as .py files in a pages/ directory. The filenames of pages are transformed to page names in the sidebar based on the the rules in the section below. For example, the About.py file will appear as \"About\" in the sidebar, 2_Page_two.py appears as \"Page two\", and 3_😎_three.py appears as “😎 three”:\nOnly .py files in the pages/ directory will be loaded as pages. Streamlit ignores all other files in the pages/ directory and subdirectories.\nHow pages are labeled and sorted in the UI\nPage labels in the sidebar UI are generated from filenames. They may differ from the page title set in st.set_page_config. Let's learn what constitutes a valid filename for a page, how pages are displayed in the sidebar, and how pages are sorted.\nValid filenames for pages\nFilenames are composed of four different parts:\nA number — if the file is prefixed with a number.\nA separator — could be _, -, space, or any combination thereof.\nA label — which is everything up to, but not including, .py.\nThe extension — which is always .py.\nHow pages are displayed in the sidebar\nWhat is displayed in the sidebar is the label part of the filename:\nIf there's no label, Streamlit uses the number as the label.\nIn the UI, Streamlit beautifies the label by replacing _ with space.\nHow pages are sorted in the sidebar\nSorting considers numbers in the filename to be actual numbers (integers):\nFiles that have a number appear before files without a number.\nFiles are sorted based on the number (if any), followed by the title (if any).\nWhen files are sorted, Streamlit treats the number as an actual number rather than a string. So 03 is the same as 3.\nThis table shows examples of filenames and their corresponding labels, sorted by the order in which they appear in the sidebar.\nExamples:\nFilenameRendered label\n1 - first page.pyfirst page\n12 monkeys.pymonkeys\n123.py123\n123_hello_dear_world.pyhello dear world\n_12 monkeys.py12 monkeys\nstar\nTip\nEmojis can be used to make your page names more fun! For example, a file named 🏠_Home.py will create a page titled \"🏠 Home\" in the sidebar.\nNavigating between pages\nPages are automatically shown in a nice navigation UI inside the app's sidebar. When you click on a page in the sidebar UI, Streamlit navigates to that page without reloading the entire frontend — making app browsing incredibly fast!\nYou can also navigate between pages using URLs. Pages have their own URLs, defined by the file's label. When multiple files have the same label, Streamlit picks the first one (based on the ordering described above). Users can view a specific page by visiting the page's URL.\nIf a user tries to access a URL for a page that does not exist, they will see a modal like the one below, saying the user has requested a page that was not found in the app’s pages/ directory.\nNotes\nPages support magic commands.\nPages support run-on-save. Additionally, when you save a page, this causes a rerun for users currently viewing that exact page.\nAdding or deleting a page causes the UI to update immediately.\nUpdating pages in the sidebar does not rerun the script.\nst.set_page_config works at the page level. When you set a title or favicon using st.set_page_config, this applies to the current page only.\nPages share the same Python modules globally:\n# page1.py\nimport foo\nfoo.hello = 123\n# page2.py\nimport foo\nst.write(foo.hello) # If page1 already executed, this should write 123\nPages share the same st.session_state:\n# page1.py\nimport streamlit as st\nif \"shared\" not in st.session_state:\nst.session_state[\"shared\"] = True\n# page2.py\nimport streamlit as st\nst.write(st.session_state[\"shared\"])\n# If page1 already executed, this should write True\nYou now have a solid understanding of multipage apps. You've learned how to structure apps, define pages, and navigate between pages in the user interface. It's time to create your first multipage app! 🥳\nWas this page helpful?\nthumb_up\nYes\nthumb_down\nNo\nedit\nSuggest edits\nforum\nStill have questions?\nOur forums are full of helpful information and Streamlit experts.\nPrevious:\nCreate an app\nNext:\nCreate a multipage app\nHome\nContact Us\nCommunity\nCopyright © 2023, Streamlit Inc."
"name": "API reference",
"url": "https://docs.streamlit.io/library/api-reference",
"page": "Documentation\nsearch\nSearch\ndescription\nStreamlit library\nGet started\nadd\nAPI reference\nremove\nWrite and magic\nadd\nText elements\nadd\nData display elements\nadd\nChart elements\nadd\nInput widgets\nadd\nMedia elements\nadd\nLayouts and containers\nadd\nStatus elements\nadd\nControl flow\nadd\nUtilities\nadd\nMutate charts\nState management\nPerformance\nadd\nPersonalization\nadd\nConnections and databases\nadd\nAdvanced features\nadd\nComponents\nadd\nRoadmap\nopen_in_new\nChangelog\nCheat sheet\ncloud\nStreamlit Community Cloud\nGet started\nadd\nTrust and Security\nRelease notes\nopen_in_new\nTroubleshooting\nschool\nKnowledge base\nTutorials\nadd\nUsing Streamlit\nStreamlit Components\nInstalling dependencies\nDeployment issues\nHome/\nStreamlit library/\nAPI reference\nAPI reference\nStreamlit makes it easy for you to visualize, mutate, and share data. The API reference is organized by activity type, like displaying data or optimizing performance. Each section includes methods associated with the activity type, including examples.\nBrowse our API below and click to learn more about any of our available commands! 🎈\nDisplay almost anything\nst.write\nWrite arguments to the app.\nst.write(\"Hello **world**!\")\nst.write(my_data_frame)\nst.write(my_mpl_figure)\nMagic\nAny time Streamlit sees either a variable or literal value on its own line, it automatically writes that to your app using st.write\n\"Hello **world**!\"\nmy_data_frame\nmy_mpl_figure\nText elements\nMarkdown\nDisplay string formatted as Markdown.\nst.markdown(\"Hello **world**!\")\nTitle\nDisplay text in title formatting.\nst.title(\"The app title\")\nHeader\nDisplay text in header formatting.\nst.header(\"This is a header\")\nSubheader\nDisplay text in subheader formatting.\nst.subheader(\"This is a subheader\")\nCaption\nDisplay text in small font.\nst.caption(\"This is written small caption text\")\nCode block\nDisplay a code block with optional syntax highlighting.\nst.code(\"a = 1234\")\nPreformatted text\nWrite fixed-width and preformatted text.\nst.text(\"Hello world\")\nLaTeX\nDisplay mathematical expressions formatted as LaTeX.\nst.latex(\"\\int a x^2 \\,dx\")\nDivider\nDisplay a horizontal rule.\nst.divider()\nData display elements\nDataframes\nDisplay a dataframe as an interactive table.\nst.dataframe(my_data_frame)\nStatic tables\nDisplay a static table.\nst.table(my_data_frame)\nMetrics\nDisplay a metric in big bold font, with an optional indicator of how the metric changed.\nst.metric(\"My metric\", 42, 2)\nDicts and JSON\nDisplay object or string as a pretty-printed JSON string.\nst.json(my_dict)\nChart elements\nSimple line charts\nDisplay a line chart.\nst.line_chart(my_data_frame)\nSimple area charts\nDisplay an area chart.\nst.area_chart(my_data_frame)\nSimple bar charts\nDisplay a bar chart.\nst.bar_chart(my_data_frame)\nScatterplots on maps\nDisplay a map with points on it.\nst.map(my_data_frame)\nMatplotlib\nDisplay a matplotlib.pyplot figure.\nst.pyplot(my_mpl_figure)\nAltair\nDisplay a chart using the Altair library.\nst.altair_chart(my_altair_chart)\nVega-Lite\nDisplay a chart using the Vega-Lite library.\nst.vega_lite_chart(my_vega_lite_chart)\nPlotly\nDisplay an interactive Plotly chart.\nst.plotly_chart(my_plotly_chart)\nBokeh\nDisplay an interactive Bokeh chart.\nst.bokeh_chart(my_bokeh_chart)\nPyDeck\nDisplay a chart using the PyDeck library.\nst.pydeck_chart(my_pydeck_chart)\nGraphViz\nDisplay a graph using the dagre-d3 library.\nst.graphviz_chart(my_graphviz_spec)\nInput widgets\nButton\nDisplay a button widget.\nclicked = st.button(\"Click me\")\nData editor\nDisplay a data editor widget.\nedited = st.experimental_data_editor(df, num_rows=\"dynamic\")\nDownload button\nDisplay a download button widget.\nst.download_button(\"Download file\", file)\nCheckbox\nDisplay a checkbox widget.\nselected = st.checkbox(\"I agree\")\nRadio\nDisplay a radio button widget.\nchoice = st.radio(\"Pick one\", [\"cats\", \"dogs\"])\nSelectbox\nDisplay a select widget.\nchoice = st.selectbox(\"Pick one\", [\"cats\", \"dogs\"])\nMultiselect\nDisplay a multiselect widget. The multiselect widget starts as empty.\nchoices = st.multiselect(\"Buy\", [\"milk\", \"apples\", \"potatoes\"])\nSlider\nDisplay a slider widget.\nnumber = st.slider(\"Pick a number\", 0, 100)\nSelect-slider\nDisplay a slider widget to select items from a list.\nsize = st.select_slider(\"Pick a size\", [\"S\", \"M\", \"L\"])\nText input\nDisplay a single-line text input widget.\nname = st.text_input(\"First name\")\nNumber input\nDisplay a numeric input widget.\nchoice = st.number_input(\"Pick a number\", 0, 10)\nText-area\nDisplay a multi-line text input widget.\ntext = st.text_area(\"Text to translate\")\nDate input\nDisplay a date input widget.\ndate = st.date_input(\"Your birthday\")\nTime input\nDisplay a time input widget.\ntime = st.time_input(\"Meeting time\")\nFile Uploader\nDisplay a file uploader widget.\ndata = st.file_uploader(\"Upload a CSV\")\nCamera input\nDisplay a widget that allows users to upload images directly from a camera.\nimage = st.camera_input(\"Take a picture\")\nColor picker\nDisplay a color picker widget.\ncolor = st.color_picker(\"Pick a color\")\nMedia elements\nImage\nDisplay an image or list of images.\nst.image(numpy_array)\nst.image(image_bytes)\nst.image(file)\nst.image(\"https://example.com/myimage.jpg\")\nAudio\nDisplay an audio player.\nst.audio(numpy_array)\nst.audio(audio_bytes)\nst.audio(file)\nst.audio(\"https://example.com/myaudio.mp3\", format=\"audio/mp3\")\nVideo\nDisplay a video player.\nst.video(numpy_array)\nst.video(video_bytes)\nst.video(file)\nst.video(\"https://example.com/myvideo.mp4\", format=\"video/mp4\")\nLayouts and containers\nSidebar\nDisplay items in a sidebar.\nst.sidebar.write(\"This lives in the sidebar\")\nst.sidebar.button(\"Click me!\")\nColumns\nInsert containers laid out as side-by-side columns.\ncol1, col2 = st.columns(2)\ncol1.write(\"this is column 1\")\ncol2.write(\"this is column 2\")\nTabs\nInsert containers separated into tabs.\ntab1, tab2 = st.tabs([\"Tab 1\", \"Tab2\"])\ntab1.write(\"this is tab 1\")\ntab2.write(\"this is tab 2\")\nExpander\nInsert a multi-element container that can be expanded/collapsed.\nwith st.expander(\"Open to see more\"):\nst.write(\"This is more content\")\nContainer\nInsert a multi-element container.\nc = st.container()\nst.write(\"This will show last\")\nc.write(\"This will show first\")\nc.write(\"This will show second\")\nEmpty\nInsert a single-element container.\nc = st.empty()\nst.write(\"This will show last\")\nc.write(\"This will be replaced\")\nc.write(\"This will show first\")\nDisplay progress and status\nProgress bar\nDisplay a progress bar.\nfor i in range(101):\nst.progress(i)\ndo_something_slow()\nSpinner\nTemporarily displays a message while executing a block of code.\nwith st.spinner(\"Please wait...\"):\ndo_something_slow()\nBalloons\nDisplay celebratory balloons!\ndo_something()\n# Celebrate when all done!\nst.balloons()\nSnowflakes\nDisplay celebratory snowflakes!\ndo_something()\n# Celebrate when all done!\nst.snow()\nError box\nDisplay error message.\nst.error(\"We encountered an error\")\nWarning box\nDisplay warning message.\nst.warning(\"Unable to fetch image. Skipping...\")\nInfo box\nDisplay an informational message.\nst.info(\"Dataset is updated every day at midnight.\")\nSuccess box\nDisplay a success message.\nst.success(\"Match found!\")\nException output\nDisplay an exception.\ne = RuntimeError(\"This is an exception of type RuntimeError\")\nst.exception(e)\nControl flow\nForms\nCreate a form that batches elements together with a “Submit” button.\nwith st.form(key='my_form'):\nusername = st.text_input(\"Username\")\npassword = st.text_input(\"Password\")\nst.form_submit_button(\"Login\")\nStop execution\nStops execution immediately.\nst.stop()\nRerun script\nRerun the script immediately.\nst.experimental_rerun()\nUtilities\nSet page title, favicon, and more\nConfigures the default settings of the page.\nst.set_page_config(\ntitle=\"My app\",\nfavicon=\":shark:\",\n)\nEcho\nDisplay some code on the app, then execute it. Useful for tutorials.\nwith st.echo():\nst.write('This code will be printed')\nGet help\nDisplay object’s doc string, nicely formatted.\nst.help(st.write)\nst.help(pd.DataFrame)\nst.experimental_show\nWrite arguments and argument names to your app for debugging purposes.\ndf = pd.DataFrame(\n'first column': [1, 2, 3, 4],\n'second column': [10, 20, 30, 40],\n)\nst.experimental_show(df)\nGet query parameters\nReturn the query parameters that are currently showing in the browser's URL bar.\nst.experimental_get_query_params()\nSet query parameters\nSet the query parameters that are shown in the browser's URL bar.\nst.experimental_set_query_params(\nshow_map=True,\nselected=[\"asia\"]\n)\nMutate charts\nAdd rows\nAppend a dataframe to the bottom of the current one in certain elements, for optimized data updates.\nelement = st.line_chart(df)\nelement.add_rows(df_with_extra_rows)\nState management\nSession state\nSession state is a way to share variables between reruns, for each user session.\nst.session_state['key'] = value\nPerformance\nCache data\nFunction decorator to cache functions that return data (e.g. dataframe transforms, database queries, ML inference).\n@st.cache_data\ndef long_function(param1, param2):\n# Perform expensive computation here or\n# fetch data from the web here\nreturn data\nCache resource\nFunction decorator to cache functions that return global resources (e.g. database connections, ML models).\n@st.cache_resource\ndef init_model():\n# Return a global resource here\nreturn pipeline(\n\"sentiment-analysis\",\nmodel=\"distilbert-base-uncased-finetuned-sst-2-english\"\n)\nClear cached data\nClear all in-memory and on-disk data caches.\n@st.cache_data\ndef long_function(param1, param2):\n# Perform expensive computation here or\n# fetch data from the web here\nreturn data\nif st.checkbox(\"Clear All\"):\n# Clear values from *all* cache_data functions\nst.cache_data.clear()\nClear cached resources\nClear all st.cache_resource caches.\n@st.cache_resource\ndef init_model():\n# Return a global resource here\nreturn pipeline(\n\"sentiment-analysis\",\nmodel=\"distilbert-base-uncased-finetuned-sst-2-english\"\n)\nif st.checkbox(\"Clear All\"):\n# Clear values from *all* cache_resource functions\nst.cache_data.clear()\nConnections and databases\nSetup your connection\nCreate a connection\nConnect to a data source or API\nconn = st.experimental_connection('pets_db', type='sql')\npet_owners = conn.query('select * from pet_owners')\nst.dataframe(pet_owners)\nBuilt-in connections\nSQLConnection\nA connection to a SQL database using SQLAlchemy.\nconn = st.experimental_connection('sql')\nSnowparkConnection\nA connection to Snowflake Snowpark.\nconn = st.experimental_connection('snowpark')\nThird-party connections\nConnection base class\nBuild your own connection with ExperimentalBaseConnection.\nclass MyConnection(ExperimentalBaseConnection[myconn.MyConnection]):\ndef _connect(self, **kwargs) -> MyConnection:\nreturn myconn.connect(**self._secrets, **kwargs)\ndef query(self, query):\nreturn self._instance.query(query)\nPersonalization\nUser info\nst.experimental_user returns information about the logged-in user of private apps on Streamlit Community Cloud.\nif st.experimental_user.email == \"foo@corp.com\":\nst.write(\"Welcome back, \", st.experimental_user.email)\nelse:\nst.write(\"You are not authorized to view this page.\")\nWas this page helpful?\nthumb_up\nYes\nthumb_down\nNo\nedit\nSuggest edits\nforum\nStill have questions?\nOur forums are full of helpful information and Streamlit experts.\nPrevious:\nGet started\nNext:\nWrite and magic\nHome\nContact Us\nCommunity\nCopyright © 2023, Streamlit Inc."
"name": "Advanced features",
"url": "https://docs.streamlit.io/library/advanced-features",
"page": "Documentation\nsearch\nSearch\ndescription\nStreamlit library\nGet started\nadd\nAPI reference\nadd\nAdvanced features\nremove\nCommand-line options\nConfiguration\nTheming\nCaching\nAdd statefulness to apps\nDataframes\nWidget semantics\nPre-release features\nWorking with timezones\nStatic file serving\nHTTPS support\nSecrets management\nComponents\nadd\nRoadmap\nopen_in_new\nChangelog\nCheat sheet\ncloud\nStreamlit Community Cloud\nGet started\nadd\nTrust and Security\nRelease notes\nopen_in_new\nTroubleshooting\nschool\nKnowledge base\nTutorials\nadd\nUsing Streamlit\nStreamlit Components\nInstalling dependencies\nDeployment issues\nHome/\nStreamlit library/\nAdvanced features\nAdvanced features\nThis section gives you background on how different parts of Streamlit work.\nCommand-line options\nWhen you install Streamlit, a command-line (CLI) tool gets installed as well. The purpose of this tool is to run Streamlit apps, change Streamlit configuration options, and help you diagnose and fix issues.\nWhat is the command-line interface (CLI)?\nHow to run Streamlit apps from the CLI?\nView Streamlit version from the CLI?\nView documentation from the CLI\nClear cache from the CLI\nStreamlit configuration\nStreamlit provides four different ways to set configuration options. Learn how to use each of them to change the behavior of Streamlit.\nHow to set configuration options?\nOpt out of telemetry collection\nView all configuration options\nTheming\nThis section provides examples of how Streamlit page elements are affected by the various theme config options.\nprimaryColor\nbackgroundcolor\nsecondarybackgroundcolor\ntextcolor\nfont\nbase\nCaching\nThe Streamlit cache allows your app to stay performant even when loading data from the web, manipulating large datasets, or performing expensive computations. To cache a function in Streamlit, you need to decorate it with one of two decorators: st.cache_data and st.cache_resource.\nMinimal example\nBasic usage\nst.cache_data\nst.cache_resource\nDeciding which caching decorator to use\nAdvanced usage\nExcluding input parameters\nControlling cache size and duration\nCustomizing the spinner\nUsing Streamlit commands in cached functions\nMutation and concurrency issues\nMigrating from st.cache\nAdd statefulness to apps\nSession State is a way to share variables between reruns, for each user session. In addition to the ability to store and persist state, Streamlit also exposes the ability to manipulate state using Callbacks.\nWhat is Session State?\nHow to initialize Session State items?\nHow to read and update Session State items?\nHow to use callbacks in Session State?\nHow to use args and kwargs in callbacks?\nHow to use callbacks in forms?\nHow is Session State related to Widget State?\nCaveats and limitations\nPre-release features\nAt Streamlit, we like to move quick while keeping things stable. In our latest effort to move even faster without sacrificing stability, we're offering our bold and fearless users two ways to try out Streamlit's bleeding-edge features.\nExperimental features\nNightly releases\nSecrets management\nThis section provides examples of how to use secrets management to store and retrieve sensitive information in your Streamlit app.\nDevelop locally and set up secrets\nUse secrets in your app\nError handling\nUse secrets on Streamlit Community Cloud\nWorking with timezones\nWorking with timezones can be tricky. This section provides a high-level description of how to handle timezones in Streamlit to avoid unexpected behavior.\nOverview\nHow Streamlit handles timezones\ndatetime instance without a timezone (naive)\ndatetime instance with a timezone\nAdvanced notes on widget behavior\nWidgets are magical and often work how you want. But they can have surprising behavior in some situations. This section provides is a high-level, abstract description of widget behavior, including some common edge-cases.\nWas this page helpful?\nthumb_up\nYes\nthumb_down\nNo\nedit\nSuggest edits\nforum\nStill have questions?\nOur forums are full of helpful information and Streamlit experts.\nPrevious:\nAPI reference\nNext:\nCommand-line options\nHome\nContact Us\nCommunity\nCopyright © 2023, Streamlit Inc."
"name": "Components",
"url": "https://docs.streamlit.io/library/components",
"page": "Documentation\nsearch\nSearch\ndescription\nStreamlit library\nGet started\nadd\nAPI reference\nadd\nAdvanced features\nadd\nComponents\nremove\nComponents API\nCreate a Component\nPublish a Component\nComponent gallery\nopen_in_new\nRoadmap\nopen_in_new\nChangelog\nCheat sheet\ncloud\nStreamlit Community Cloud\nGet started\nadd\nTrust and Security\nRelease notes\nopen_in_new\nTroubleshooting\nschool\nKnowledge base\nTutorials\nadd\nUsing Streamlit\nStreamlit Components\nInstalling dependencies\nDeployment issues\nHome/\nStreamlit library/\nComponents\nCustom Components\nComponents are third-party Python modules that extend what's possible with Streamlit.\nHow to use a Component\nComponents are super easy to use:\nStart by finding the Component you'd like to use. Two great resources for this are:\nThe Component gallery\nThis thread, by Fanilo A. from our forums.\nInstall the Component using your favorite Python package manager. This step and all following steps are described in your component's instructions.\nFor example, to use the fantastic AgGrid Component, you first install it with:\npip install streamlit-aggrid\nIn your Python code, import the Component as described in its instructions. For AgGrid, this step is:\nfrom st_aggrid import AgGrid\n...now you're ready to use it! For AgGrid, that's:\nAgGrid(my_dataframe)\nMaking your own Component\nIf you're interested in making your own component, check out the following resources:\nCreate a Component\nPublish a Component\nComponents API\nblog post for when we launched Components!\nAlternatively, if you prefer to learn using videos, our engineer Tim Conkling has put together some amazing tutorials:\nVideo tutorial, part 1\nVideo tutorial, part 2\nWas this page helpful?\nthumb_up\nYes\nthumb_down\nNo\nedit\nSuggest edits\nforum\nStill have questions?\nOur forums are full of helpful information and Streamlit experts.\nPrevious:\nAdvanced features\nNext:\nComponents API\nHome\nContact Us\nCommunity\nCopyright © 2023, Streamlit Inc."
"name": "Roadmap",
"url": "https://roadmap.streamlit.app/",
"page": ""
"name": "Changelog",
"url": "https://docs.streamlit.io/library/changelog",
"page": "Documentation\nsearch\nSearch\ndescription\nStreamlit library\nGet started\nadd\nAPI reference\nadd\nAdvanced features\nadd\nComponents\nadd\nRoadmap\nopen_in_new\nChangelog\nCheat sheet\ncloud\nStreamlit Community Cloud\nGet started\nadd\nTrust and Security\nRelease notes\nopen_in_new\nTroubleshooting\nschool\nKnowledge base\nTutorials\nadd\nUsing Streamlit\nStreamlit Components\nInstalling dependencies\nDeployment issues\nHome/\nStreamlit library/\nChangelog\nChangelog\nThis page lists highlights, bug fixes, and known issues for official Streamlit releases. If you're looking for information about nightly releases, beta features, or experimental features, see Try pre-release features.\nstar\nTip\nTo upgrade to the latest version of Streamlit, run:\npip install --upgrade streamlit\nVersion 1.22.0\nRelease date: April 27, 2023\nHighlights\n🔌 Introducing st.experimental_connection: Easily connect your app to data sources and APIs using our new connection feature. Find more details in the API reference, and stay tuned for an upcoming blog post and in-depth documentation! In the meantime, explore our updated MySQL and Snowflake connection tutorials for examples of this feature.\nNotable Changes\n🐼 Streamlit now supports Pandas 2.0 (#6413, #6378, #6507). Thanks, connortann!\n🍔 Customize the visibility of items in the toolbar, options menu, and the settings dialog using the client.toolbarMode config option (#6174).\n🪵 Streamlit logs now reside in the \"streamlit\" namespace instead of the root logger, enabling app developers to better manage log handling (#3978, #6377).\nOther Changes\n🔏 CLI parameters can no longer be used to set sensitive configuration values (#6376).\n🤖 Improved the debugging experience by reducing log noise (#6391).\n🐞 Bug fix: @st.cache_data decorated functions support UUID objects as parameters (#6440, #6459).\n🐛 Bug fix: Tabbing through buttons and other elements now displays a red border only when focused, not when clicked (#6373).\n🪲 Bug fix: st.multiselect's clear icon is larger and includes a hover effect (#6471).\n🐜 Bug fix: Custom theme font settings no longer apply to code blocks (#6484, #6535).\n©️ Bug fix: st.code's copy-to-clipboard button appears when you hover on code blocks (#6490, #6498).\nVersion 1.21.0\nRelease date: April 6, 2023\nHighlights\n📏 Introducing st.divider — a command that displays a horizontal line in your app. Learn how to use this command in its API reference.\n🔏 Streamlit now supports the use of a global secrets.toml file, in addition to a project-level file, to easily store and securely access your secrets. Learn more in Secrets management.\n🚀 st.help has been revamped to show more information about object methods, attributes, classes, and more, which is great for debugging (#5857, #6382)!\nNotable Changes\n🪜 st.time_input supports adding a stepping interval with the keyword-only step parameter (#6071).\n❓ Most text elements can include tooltips with the help parameter (#6043).\n↔️ st.pyplot has a use_container_width parameter to set the chart to the container width (now all chart elements support this parameter) (#6067).\n👩‍💻 st.code supports optionally displaying line numbers to the code block’s left with the boolean line_numbers parameter (#5756, #6042).\n⚓ Anchors in header elements can be turned off by setting anchor=False (#6158).\nOther Changes\n🐼 st.table and st.dataframe support pandas.Period, and number and boolean types in categorical columns (#2547, #5429, #5329, #6248).\n🕸️ Added .webp to the list of allowed static file extensions (#6331)\n🐞 Bug fix: stop script execution on websocket close to immediately clear session information (#6166, #6204).\n🐜 Bug fixes: updated allowed/disallowed label markdown behavior such that unsupported elements are unwrapped and only their children (text contents) render (#5872, #6036, #6054, #6163).\n🪲 Bug fixes: don’t push browser history states on rerun, use HTTPS to load external resources in streamlit hello, and make the browser back button work for multipage apps (#5292, #6266, #6232). Thanks, whitphx!\n🐝 Bug fix: avoid showing emoji on non-UTF-8 terminals. (#2284, #6088). Thanks, kcarnold!\n📁 Bug fix: override default use of File System Access API for react-dropzone so that st.file_uploader's File Selection Dialog only shows file types corresponding to those included in the type parameter (#6176, #6315).\n💾 Bug fix: make the .clear() method on cache-decorated functions work (#6310, #6321).\n🏃 Bug fix: st.experimental_get_query_params doesn’t need reruns to work (#6347, #6348). Thanks, PaleNeutron!\n🐛 Bug fix: CachedStFunctionWarning mentions experimental_allow_widgets instead of the deprecated suppress_st_warning (#6216, #6217).\nVersion 1.20.0\nRelease date: March 09, 2023\nNotable Changes\n🔐 Added support for configuring SSL to serve apps directly over HTTPS (#5969).\n🖼️ Granular control over app embedding behavior with the /?embed and /?embed_options query parameters. Learn how to use this feature in our docs (#6011, #6019).\n⚡ Enabled the runner.fastReruns configuration option by default to make apps much more responsive to user interaction (#6200).\nOther Changes\n🍔 Cleaned up the hamburger menu by removing the least used options (#6080).\n🖨️ Design changes to ensure apps being printed or saved as a PDF look good (#6180).\n🐞 Bug fix: improved dtypes checking in st.experimental_data_editor (#6185, #6188).\n🐛 Bug fix: properly position st.metric's help tooltip when not inside columns (#6168).\n🪲 Bug fix: regression in retrieving messages from the server's ForwardMsgCache (#6210).\n🌀 Bug fix: st.cache_data docstring for the show_spinner param now lists str as a supported type (#6207, #6213).\n⏱️ Made ping and websocket timeouts far more forgiving (#6212).\n🗺️ st.map and st.pydeck_chart docs state that Streamlit's Mapbox token will not work indefinitely (#6143).\nVersion 1.19.0\nRelease date: February 23, 2023\nHighlights\n✂️ Introducing st.experimental_data_editor, a widget that allows you to edit DataFrames and many other data structures in a table-like UI. Read more in our documentation and blog post.\nOther Changes\n✨ Streamlit’s GitHub README got a new look (#6016).\n🌚 Improved readability of styled dataframe cells in dark mode (#6060, #6098).\n🐛 Bug fix: make apps work again in the latest versions of Safari, and in Chrome with third-party cookies blocked (#6092, #6094, #6087, #6100).\n🐞 Bug fix: refer to new cache primitives in the “Clear cache” dialog and error messages (#6082, #6128).\n🐝 Bug fix: properly cache class member functions and instance methods (#6109, #6114).\n🐜 Bug fix: regression in st.metric tooltip position (#6093, #6129).\n🪲 Bug fix: allow fullscreen button to show for dataframes, charts, etc, in expander (#6083, #6148).\nVersion 1.18.0\nRelease date: February 09, 2023\nHighlights\n🎊 Introducing @st.cache_data and @st.cache_resource — two new caching commands to replace st.cache! Check out our blog post and documentation for more information.\nNotable Changes\n🪆 st.columns supports up to one level of column nesting (i.e., columns inside columns) in the main area of the app.\n⏳ st.progress supports adding a message to display above the progress bar with the text keyword parameter.\n↔️ st.button has an optional use_container_width parameter to allow you to stretch buttons across the full container width.\n🐍 We formally added support for Python 3.11.\n🖨️ Save your app as a PDF via the “Print” option in your app’s hamburger menu.\n🛎️ Apps can serve small, static media files via the enableStaticServing config option. See our documentation on how to use this feature and our demo app for an example.\nOther Changes\n🏁 All Streamlit endpoints (including /healthz) have been renamed to have a consistent pattern and avoid any clashes with reserved endpoints of GCP (notably Cloud Run and App Engine) (#5534).\n⚡ Improved caching performance when multiple sessions access an uncomputed cached value simultaneously (#6017).\n🚧 Streamlit only displays deprecation warnings in the browser when the client.showErrorDetails config option is set to True. Deprecation warnings always get logged to the console, regardless of whether they're displayed in-browser (#5945).\n🏓 Refactored the st.dataframe internals to improve dataframe handling and conversion, such as detecting more types, converting key-value dicts to dataframes, and more (#6026, #6023).\n💽 The behavior of widget labels when they are passed unsupported Markdown elements is documented (#5978).\n📊 Bug fix: Plotly improvements — upgraded multiple frontend dependencies, including Plotly, to the latest version to properly redraw cached charts, make Plotly mapbox animations work, and allow users to update the figure layout when using the Streamlit theme (#5885, #5967, #6055).\n📶 Bug fix: allow browser tabs that transiently disconnect (due to a network blip, load balancer timeout, etc.) to avoid losing all of their state (#5856).\n📱 Bug fix: the keyboard is hidden on mobile when st.selectbox and st.multiselect have less than 10 options (#5979).\n🐝 Bug fix: design tweaks to st.metric, st.multiselect, st.tabs , and menu items to prevent label overflow and scrolling issues, especially with small viewport sizes (#5933, #6034).\n🐞 Bug fix: switched to a functioning Twemoji URL from which page favicons are loaded in st.set_page_config (#5943).\n✍️ More type hints (#5986). Thanks, harahu!\nVersion 1.17.0\nRelease date: January 12, 2023\nNotable Changes\n🪄 @st.experimental_singleton supports an optional validate parameter that accepts a validation function for cached data and is called each time the cached value is accessed.\n💾 @st.experimental_memo’s persist parameter can also accept booleans.\nOther Changes\n📟 Multipage apps exclude __init__.py from the page selector (#5890).\n📐 The iframes of embedded apps have the ability to dynamically resize their height (#5894).\n🐞 Bug fix: thumb values of range sliders respect the container width (#5913).\n🪲 Bug fix: all examples in docstrings of Streamlit commands contain relevant imports to make them reproducible (#5877).\nVersion 1.16.0\nRelease date: December 14, 2022\nHighlights\n👩‍🎨 Introducing a new Streamlit theme for Altair, Plotly, and Vega-Lite charts! Check out our blog post for more information.\n🎨 Streamlit now supports colored text in all commands that accept Markdown, including st.markdown, st.header, and more. Learn more in our documentation.\nNotable Changes\n🔁 Functions cached with st.experimental_memo or st.experimental_singleton can contain Streamlit media elements and forms.\n⛄ All Streamlit commands that accept pandas DataFrames as input also support Snowpark and PySpark DataFrames.\n🏷 st.checkbox and st.metric can customize how to hide their labels with the label_visibility parameter.\nOther Changes\n🗺️ st.map improvements: support for upper case columns and better exception messages (#5679, #5792).\n🐞 Bug fix: st.plotly_chart respects the figure’s height attribute and the use_container_width parameter (#5779).\n🪲 Bug fix: all commands with the icon parameter such as st.error, st.warning, etc, can contain emojis with variant selectors (#5583).\n🐝 Bug fix: prevent st.camera_input from jittering when resizing the browser window (#5661).\n🐜 Bug fix: update exception layout to avoid overflow of stack traces (#5700).\nVersion 1.15.0\nRelease date: November 17, 2022\nNotable Changes\n💅 Widget labels can contain inline Markdown. See our docs and demo app for more info.\n🎵 st.audio now supports playing audio data passed in as NumPy arrays with the keyword-only sample_rate parameter.\n🔁 Functions cached with st.experimental_memo or st.experimental_singleton can contain Streamlit widgets using the experimental_allow_widgets parameter. This allows caching checkboxes, sliders, radio buttons, and more!\nOther Changes\n👩‍🎨 Design tweak to prevent jittering in sliders (#5612).\n🐛 Bug fix: links in headers are red, not blue (#5609).\n🐞 Bug fix: properly resize Plotly charts when exiting fullscreen (#5645).\n🐝: Bug fix: don’t accidentally trigger st.balloons and st.snow (#5401).\nVersion 1.14.0\nRelease date: October 27, 2022\nHighlights\n🎨 st.button and st.form_submit_button support designating buttons as \"primary\" (for additional emphasis) or \"secondary\" (for normal buttons) with the type keyword-only parameter.\nNotable Changes\n🤏 st.multiselect has a keyword-only max_selections parameter to limit the number of options that can be selected at a time.\n📄 st.form_submit_button now has the disabled parameter that removes interactivity.\nOther Changes\n🏓 st.dataframe and st.table accept categorical intervals as input (#5395).\n⚡ Performance improvements to Plotly charts (#5542).\n🪲 Bug fix: st.download_button supports non-latin1 characters in filenames (#5465).\n🐞 Bug fix: Allow st.image to render a local GIF as a GIF, not as a static PNG (#5438).\n📱 Design tweaks to the sidebar in multipage apps (#5538, #5445, #5559).\n📊 Improvements to the axis configuration for built-in charts (#5412).\n🔧 Memo and singleton improvements: support text values for show_spinner, use datetime.timedelta objects as ttl parameter value, properly hash PIL images and Enum classes, show better error messages when returning unevaluated dataframes (#5447, #5413, #5504, #5426, #5515).\n🔍 Zoom buttons in maps created with st.map and st.pydeck_chart use light or dark style based on the app’s theme (#5479).\n🗜 Websocket headers from the current session's incoming WebSocket request can be obtained from a new \"internal\" (i.e.: subject to change without deprecation) API (#5457).\n📝 Improve the text that gets printed when you first install and use Streamlit (#5473).\nVersion 1.13.0\nRelease date: September 22, 2022\nNotable Changes\n🏷 Widgets can customize how to hide their labels with the label_visibility parameter.\n🔍 st.map adds zoom buttons to the map by default.\n↔️ st.dataframe supports the use_container_width parameter to stretch across the full container width.\n🪄 Improvements to st.dataframe sizing: Column width calculation respects column headers, supports double click between column headers to autosize, better fullscreen support, and fixes the issue with the width parameter.\nOther Changes\n⌨️ st.time_input allows for keyboard-only input (#5194).\n💿 st.memo will warn the user when using ttl and persist keyword argument together (#5032).\n🔢 st.number_input returns consistent type after rerun (#5359).\n🚒 st.sidebar UI fixes including a fix for scrollbars in Firefox browsers (#5157, #5324).\n👩‍💻 Improvements to usage metrics to guide API development.\n✍️ More type hints! (#5191, #5192, #5242, #5243, #5244, #5245, #5246) Thanks harahu!\nVersion 1.12.0\nRelease date: August 11, 2022\nHighlights\n📊 Built-in charts (e.g. st.line_chart) get a brand-new look and parameters x and y! Check out our blog post for more information.\nNotable Changes\n⏯ Functions cached with st.experimental_memo or st.experimental_singleton can now contain static st commands. This allows caching text, charts, dataframes, and more!\n↔️ The sidebar is now resizable via drag and drop.\n☎️ st.info, st.success, st.error, and st.warning got a redesign and have a new keyword-only parameter: icon.\nOther Changes\n🎚️ st.select_slider correctly handles all floats now (#4973, #4978).\n🔢 st.multi_select can take values from enums (#4987).\n🍊 st.slider range values can now be set through st.session_state (#5007).\n🎨 st.progress got a redesign (#5011, #5086).\n🔘 st.radio better deals with list-like dataframes (#5021).\n🧞‍♂️ st.cache properly handles JSON files now (#5023).\n⚓️ Headers render markdown now when the anchor parameter is set (#5038).\n🗻 st.image can now load SVGs from Inkscape (#5040).\n🗺️ st.map and st.pydeck_chart use light or dark style based on the app’s theme (#5074, #5108).\n🎈 Clicks on elements below st.balloons and st.snow don’t get blocked anymore (#5098).\n🔝 Embedded apps have lower top padding (#5111).\n💅 Adjusted padding and alignment for widgets, charts, and dataframes (#4995, #5061, #5081).\n✍️ More type hints! (#4926, #4932, #4933)\nVersion 1.11.0\nRelease date: July 14, 2022\nHighlights\n🗂 Introducing st.tabs to have tab containers in your app. See our documentation on how to use this feature.\nNotable Changes\nℹ️ st.metric supports tooltips with the help keyword parameter.\n🚇 st.columns supports setting the gap size between columns with the gap keyword parameter.\nOther Changes\n💅 Design tweaks to st.selectbox, st.expander, st.spinner (#4801).\n📱 The sidebar will close when users select a page from the navigation menu on mobile devices (#4851).\n🧠 st.memo supports dataclasses! (#4850)\n🏎 Bug fix for a race condition that destroyed widget state with rapid interaction (#4882).\n🏓 st.table presents overflowing content to be scrollable when placed inside columns and expanders (#4934).\n🐍 Types: More updated type annotations across Streamlit! (#4808, #4809, #4856)\nVersion 1.10.0\nRelease date: June 2, 2022\nHighlights\n📖 Introducing native support for multipage apps! Check out our blog post and try out our new streamlit hello.\nNotable Changes\n✨ st.dataframe has been redesigned.\n🔘 st.radio has a horizontal keyword-only parameter to display options horizontally.\n⚠️ Streamlit Community Cloud will support richer exception formatting.\n🏂 Get user information on private apps using st.experimental_user.\nOther Changes\n📊 Upgraded Vega-Lite library to support even more interactive charting improvements. See their release notes to find out more. (#4751).\n📈 st.vega_lite_chart will respond to updates, particularly in response to input widgets (#4736).\n💬 st.markdown with long text will always wrap (#4696).\n📦 Support for PDM (#4724).\n✍️ Types: Updated type annotations across Streamlit! (#4679, #4680, #4681, #4682, #4683, #4684, #4685, #4686, #4687, #4688, #4690, #4703, #4704, #4705, #4706, #4707, #4708, #4710, #4723, #4733).\nVersion 1.9.0\nRelease date: May 4, 2022\nNotable Changes\n🪗 st.json now supports a keyword-only argument, expanded on whether the JSON should be expanded by default (defaults to True).\n🏃‍♀️ More performance improvements from reducing redundant work each script run.\nOther Changes\n🏇 Widgets when disabled is set/unset will maintain its value (#4527).\n🧪 Experimental feature to increase the speed of reruns using configuration runner.fastReruns. See #4628 for the known issues in enabling this feature.\n🗺️ DataFrame timestamps support UTC offset (in addition to time zone notation) (#4669).\nVersion 1.8.0\nRelease date: March 24, 2022\nNotable Changes\n🏃‍♀️ Dataframes should see performance improvements (#4463).\nOther Changes\n🕰 st.slider handles timezones better by removing timezone conversions on the backend (#4348).\n👩‍🎨 Design improvements to our header (#4496).\nVersion 1.7.0\nRelease date: March 3, 2022\nHighlights\nIntroducing st.snow, celebrating our acquisition by Snowflake! See more information in our blog post.\nVersion 1.6.0\nRelease date: Feb 24, 2022\nOther Changes\n🗜 WebSocket compression is now disabled by default, which will improve CPU and latency performance for large dataframes. You can use the server.enableWebsocketCompression configuration option to re-enable it if you find the increased network traffic more impactful.\n☑️ 🔘 Radio and checkboxes improve focus on Keyboard navigation (#4308).\nVersion 1.5.0\nRelease date: Jan 27, 2022\nNotable Changes\n🌟 Favicon defaults to a PNG to allow for transparency (#4272).\n🚦 Select Slider Widget now has the disabled parameter that removes interactivity (completing all of our widgets) (#4314).\nOther Changes\n🔤 Improvements to our markdown library to provide better support for HTML (specifically nested HTML) (#4221).\n📖 Expanders maintain their expanded state better when multiple expanders are present (#4290).\n🗳 Improved file uploader and camera input to call its on_change handler only when necessary (#4270).\nVersion 1.4.0\nRelease date: Jan 13, 2022\nHighlights\n📸 Introducing st.camera_input for uploading images straight from your camera.\nNotable Changes\n🚦 Widgets now have the disabled parameter that removes interactivity.\n🚮 Clear st.experimental_memo and st.experimental_singleton programmatically by using the clear() method on a cached function.\n📨 Developers can now configure the maximum size of a message to accommodate larger messages within the Streamlit application. See server.maxMessageSize.\n🐍 We formally added support for Python 3.10.\nOther Changes\n😵‍💫 Calling str or repr on threading.current_thread() does not cause a RecursionError (#4172).\n📹 Gracefully stop screencast recording when user removes permission to record (#4180).\n🌇 Better scale images by using a higher-quality image bilinear resampling algorithm (#4159).\nVersion 1.3.0\nRelease date: Dec 16, 2021\nNotable Changes\n💯 Support for NumPy values in st.metric.\n🌐 Support for Mesh Layers in PyDeck.\n📊 Updated Plotly chart version to support the latest features.\n🏀 st.spinner element has visual animated spinner.\n🍰 st.caption supports HTML in text with unsafe_allow_html parameter.\nOther Changes\n🪲 Bug fix: Allow st.session_state to be used to set number_input values with no warning (#4047).\n🪲 Bug fix: Fix footer alignment in wide mode (#4035).\n🐞 Bug fix: Better support for Graphviz and Bokeh charts in containers (columns, expanders, etc.) (#4039).\n🐞 Bug fix: Support inline data values in Vega-Lite (#4070).\n✍️ Types: Updated type annotations for experimental memo and singleton decorators.\n✍️ Types: Improved type annotations for st.selectbox, st.select_slider, st.radio, st.number_input, and st.multiselect.\nVersion 1.2.0\nRelease date: Nov 11, 2021\nNotable Changes\n✏️ st.text_input and st.text_area now have a placeholder parameter to display text when the field is empty.\n📏 Viewers can now resize the input box in st.text_area.\n📁 Streamlit can auto-reload when files in sub-directories change.\n🌈 We've upgraded Bokeh support to 2.4.1! We recommend updating your Bokeh library to 2.4.1 to maintain functionality. Going forward, we'll let you know if there's a mismatch in your Bokeh version via an error prompt.\n🔒 Developers can access secrets via attribute notation (e.g. st.secrets.key vs st.secrets[\"key\"]) just like session state.\n✍️ Publish type annotations according to PEP 561. Users now get type annotations for Streamlit when running mypy (#4025).\nOther Changes\n👀 Visual fixes (#3863, #3995, #3926, #3975).\n🍔 Fixes to the hamburger menu (#3968).\n🖨️ Ability to print session state (#3970).\nVersion 1.1.0\nRelease date: Oct 21, 2021\nHighlights\n🧠 Memory improvements: Streamlit apps allocate way less memory over time now.\nNotable Changes\n♻️ Apps automatically rerun now when the content of secrets.toml changes (before this you had to refresh the page manually).\nOther Changes\n🔗 Redirected some links to our brand-new docs site, e.g. in exceptions.\n🪲 Bug fix: Allow initialization of range slider with session state (#3586).\n🐞 Bug fix: Refresh chart when using add_rows with datetime index (#3653).\n✍️ Added some more type annotation in our codebase (#3908).\nVersion 1.0.0\nRelease date: Oct 5, 2021\nHighlights\n🎈Announcing Streamlit 1.0! To read more about check out our 1.0 blog post.\nOther Changes\n🐞 Fixed an issue where using df.dtypes to show datatypes for a DF fails while using Arrow (#3709), Image captions stay within image width and are readable (#3530).\nVersion 0.89.0\nRelease date: Sep 22, 2021\nHighlights\n💰 Introducing st.experimental_memo and experimental_singleton, a new primitive for caching! See our blog post.\n🍔 Streamlit allows developers to configure their hamburger menu to be more user-centric.\nNotable Changes\n💅 We updated our UI to a more polished look with a new font.\n🎨 We now support theme.base in the theme object when it's sent to custom components.\n🧠 We've modified session state to reset widgets if any of their arguments changed even if they provide a key.\nSome widget behavior may have changed, but we believe this change makes the most sense. We have added a section to our documentation describing how they behave.\nOther Changes\n🐞 Bug fixes: Support svgs from a URL (#3809) and that do not start with <svg> tag (#3789).\nVersion 0.88.0\nRelease date: Sep 2, 2021\nHighlights\n⬇️ Introducing st.download_button, a new button widget for easily downloading files.\nNotable Changes\n🛑 We made changes to improve the redacted exception experience on Streamlit Community Cloud. When client.showErrorDetails=true exceptions display the Error Type and the Traceback, but redact the actual error text to prevent data leaks.\nVersion 0.87.0\nRelease date: Aug 19, 2021\nHighlights\n🔢 Introducing st.metric, an API for displaying KPIs. Check out the demo app showcasing the functionality.\nOther Changes\n🐞 Bug Fixes: File uploader retains state upon expander closing (#3557), setIn Error with st.empty (#3659), Missing IFrame embeds in docs (#3706), Fix error writing certain PNG files (#3597).\nVersion 0.86.0\nRelease date: Aug 5, 2021\nHighlights\n🎓 Our layout primitives are graduating from beta! You can now use st.columns, st.container and st.expander without the beta_ prefix.\nNotable Changes\n📱 When using st.columns, columns will stack vertically when viewport size <640px so that column layout on smaller viewports is consistent and cleaner. (#3594).\nOther Changes\n🐞 Bug fixes: Fixed st.date_input crashes if its empty (#3194), Opening files with utf-8(#3022), st.select_slider resets its state upon interaction (#3600).\nVersion 0.85.0\nRelease date: Jul 22, 2021\nHighlights\n🏹 Streamlit now uses Apache Arrow for serializing data frames when they are sent from Streamlit server to the front end. See our blog post.\n(Users who wish to continue using the legacy data frame serialization can do so by setting the dataFrameSerialization config option to \"legacy\" in their config.toml).\nOther Changes\n🐞 Bug fixes: Unresponsive pydeck example (#3395), JSON parse error message (#2324), Tooltips rendering (#3300), Colorpicker not working on Streamlit Sharing (#2689).\nVersion 0.84.0\nRelease date: Jul 1, 2021\nHighlights\n🧠 Introducing st.session_state and widget callbacks to allow you to add statefulness to your apps. Check out the blog post\nNotable Changes\n🪄 st.text_input now has an autocomplete parameter to allow password managers to be used\nOther Changes\nUsing st.set_page_config to assign the page title no longer appends “Streamlit” to that title (#3467)\nNumberInput: disable plus/minus buttons when the widget is already at its max (or min) value (#3493)\nVersion 0.83.0\nRelease date: Jun 17, 2021\nHighlights\n🛣️ Updates to Streamlit docs to include step-by-step guides which demonstrate how to connect Streamlit apps to various databases & APIs\nNotable Changes\n📄 st.form now has a clear_on_submit parameter which \"resets\" all the form's widgets when the form is submitted.\nOther Changes\nFixed bugs regarding file encodings (#3320, #3108, #2731)\nVersion 0.82.0\nRelease date: May 13, 2021\nNotable Changes\n♻️ Improvements to memory management by forcing garbage collection between script runs.\nVersion 0.81.1\nRelease date: Apr 29, 2021\nHighlights\n📝 Introducing st.form and st.form_submit_button to allow you to batch input widgets. Check out our blog post\n🔤 Introducing st.caption so you can add explainer text anywhere in you apps.\n🎨 Updates to Theming, including ability to build a theme that inherits from any of our default themes.\n🚀 Improvements to deployment experience to Streamlit sharing from the app menu.\nOther changes\nSupport for binary files in Custom Components (#3144)\nVersion 0.80.0\nRelease date: Apr 8, 2021\nHighlights\n🔐 Streamlit now support Secrets management for apps deployed to Streamlit Sharing!\n⚓️ Titles and headers now come with automatically generated anchor links. Just hover over any title and click the 🔗 to get the link!\nOther changes\nAdded allow-downloads capability to custom components (#3040)\nFixed markdown tables in dark theme (#3020)\nImproved color picker widget in the Custom Theme dialog (#2970)\nVersion 0.79.0\nRelease date: Mar 18, 2021\nHighlights\n🌈 Introducing support for custom themes. Check out our blog post\n🌚 This release also introduces dark mode!\n🛠️ Support for tooltips on all input widgets\nOther changes\nFixed bugs regarding file encodings (#1936, #2606) and caching functions (#2728)\nVersion 0.78.0\nRelease date: Mar 4, 2021\nFeatures\nIf you're in the Streamlit for Teams beta, we made a few updates to how secrets work. Check the beta docs for more info!\nDataframes now displays timezones for all DateTime and Time columns, and shows the time with the timezone applied, rather than in UTC\nNotable Bug Fixes\nVarious improvement to column alignment in st.beta_columns\nRemoved the long-deprecated format param from st.image, and replaced with output_format.\nVersion 0.77.0\nRelease date: Feb 23, 2021\nFeatures\nAdded a new config option client.showErrorDetails allowing the developer to control the granularity of error messages. This is useful for when you deploy an app, and want to conceal from your users potentially-sensitive information contained in tracebacks.\nNotable bug fixes\nFixed bug where st.image wasn't rendering certain kinds of SVGs correctly.\nFixed regression where the current value of an st.slider was only shown on hover.\nVersion 0.76.0\nRelease date: February 4, 2021\nNotable Changes\n🎨 st.color_picker is now out of beta. This means the old beta_color_picker function, which was marked as deprecated for the past 3 months, has now been replaced with color_picker.\n🐍 Display a warning when a Streamlit script is run directly as python script.py.\nst.image's use_column_width now defaults to an auto option which will resize the image to the column width if the image exceeds the column width.\n✂️ Fixed bugs (2437 and 2247) with content getting cut off within a st.beta_expander\n📜 Fixed a bug in st.dataframe where the scrollbar overlapped with the contents in the last column.\n💾 Fixed a bug for st.file_uploader where file data returned was not the most recently uploaded file.\n➕ Fixed bugs (2086 and 2556) where some LaTeX commands were not rendering correctly.\nVersion 0.75.0\nRelease date: January 21, 2021\nNotable Changes\n🕳 st.empty previously would clear the component at the end of the script. It has now been updated to clear the component instantly.\n🛹 Previously in wide mode, we had thin margins around the webpage. This has now been increased to provide a better visual experience.\nVersion 0.74.0\nRelease date: January 6, 2021\nNotable Changes\n💾 st.file_uploader. has been stabilized and the deprecation warning and associated configuration option (deprecation.showfileUploaderEncoding) has been removed.\n📊 st.bokeh_chart is no longer duplicated when the page loads.\n🎈 Fixed page icon to support emojis with variants (i.e. 🤦‍♀️ vs 🤦🏼‍♀️) or dashes (i.e 🌙 - crescent-moon).\nVersion 0.73.0\nRelease date: December 17, 2020\nNotable Changes\n🐍 Streamlit can now be installed on Python 3.9. Streamlit components are not yet compatible with Python 3.9 and must use version 3.8 or earlier.\n🧱 Streamlit Components now allows same origin, enabling features provided by the browser such as a webcam component.\n🐙 Fix Streamlit sharing deploy experience for users running on Git versions 2.7.0 or earlier.\n🧰 Handle unexpected closing of uploaded files for st.file_uploader.\nVersion 0.72.0\nRelease date: December 2, 2020\nNotable Changes\n🌈 Establish a framework for theming and migrate existing components.\n📱 Improve the sidebar experience for mobile devices.\n🧰 Update st.file_uploader to reduce reruns.\nVersion 0.71.0\nRelease date: November 11, 2020\nNotable Changes\n📁 Updated st.file_uploader to automatically reset buffer on app reruns.\n📊 Optimize the default rendering of charts and reduce issues with the initial render.\nVersion 0.70.0\nRelease date: October 28, 2020\nNotable Changes\n🧪 st.set_page_config and st.color_picker have now been moved into the Streamlit namespace. These will be removed from beta January 28th, 2021. Learn more about our beta process here.\n📊 Improve display of bar charts for discrete values.\nVersion 0.69.0\nRelease date: October 15, 2020\nHighlights:\n🎁 Introducing Streamlit sharing, the best way to deploy, manage, and share your public Streamlit apps—for free. Read more about it on our blog post or sign up here!\nAdded st.experimental_rerun to programatically re-run your app. Thanks SimonBiggs!\nNotable Changes\n📹 Better support across browsers for start and stop times for st.video.\n🖼 Bug fix for intermittently failing media files\n📦 Bug fix for custom components compatibility with Safari. Make sure to upgrade to the latest streamlit-component-lib.\nVersion 0.68.0\nRelease date: October 8, 2020\nHighlights:\n⌗ Introducing new layout options for Streamlit! Move aside, vertical layout. Make a little space for... horizontal layout! Check out our blog post.\n💾 File uploader redesigned with new functionality for multiple files uploads and better support for working with uploaded files. This may cause breaking changes. Please see the new api in our documentation\nNotable Changes\n🎈 st.balloon has gotten a facelift with nicer balloons and smoother animations.\n🚨 Breaking Change: Following the deprecation of st.deck_gl_chart in January 2020, we have now removed the API completely. Please use st.pydeck_chart instead.\n🚨 Breaking Change: Following the deprecation of width and height for st.altair_chart, st.graphviz_chart, st.plotly_chart, and st.vega_lite_chart in January 2020, we have now removed the args completely. Please set the width and height in the respective charting library.\nVersion 0.67.0\nRelease date: September 16, 2020\nHighlights:\n🦷 Streamlit Components can now return bytes to your Streamlit App. To create a component that returns bytes, make sure to upgrade to the latest streamlit-component-lib.\nNotable Changes\n📈 Deprecation warning: Beginning December 1st, 2020 st.pyplot() will require a figure to be provided. To disable the deprecation warning, please set deprecation.showPyplotGlobalUse to False\n🎚 st.multiselect and st.select are now lightning fast when working with large datasets. Thanks masa3141!\nVersion 0.66.0\nRelease date: September 1, 2020\nHighlights:\n✏️ st.write is now available for use in the sidebar!\n🎚 A slider for distinct or non-numerical values is now available with st.select_slider.\n⌗ Streamlit Components can now return dataframes to your Streamlit App. Check out our SelectableDataTable example.\n📦 The Streamlit Components library used in our Streamlit Component template is now available as a npm package (streamlit-component-lib) to simplify future upgrades to the latest version. Existing components do not need to migrate.\nNotable Changes\n🐼 Support StringDtype from pandas version 1.0.0\n🧦 Support for running Streamlit on Unix sockets\nVersion 0.65.0\nRelease date: August 12, 2020\nHighlights:\n⚙️ Ability to set page title, favicon, sidebar state, and wide mode via st.beta_set_page_config(). See our documentation for details.\n📝 Add stateful behaviors through the use of query parameters with st.experimental_set_query_params and st.experimental_get_query_params. Thanks @zhaoooyue!\n🐼 Improved pandas dataframe support for st.radio, st.selectbox, and st.multiselect.\n🛑 Break out of your Streamlit app with st.stop.\n🖼 Inline SVG support for st.image.\nCallouts:\n🚨Deprecation Warning: The st.image parameter format has been renamed to output_format.\nVersion 0.64.0\nRelease date: July 23, 2020\nHighlights:\n📊 Default matplotlib to display charts with a tight layout. To disable this, set bbox_inches to None, inches as a string, or a Bbox\n🗃 Deprecation warning for automatic encoding on st.file_uploader\n🙈 If gatherUserStats is False, do not even load the Segment library. Thanks @tanmaylaud!\nVersion 0.63.0\nRelease date: July 13, 2020\nHighlights:\n🧩 Support for Streamlit Components!!! See documentation for more info.\n🕗 Support for datetimes in st.slider. And, of course, just like any other value you use in st.slider, you can also pass in two-element lists to get a datetime range slider.\nVersion 0.62.0\nRelease date: June 21, 2020\nHighlights:\n📨 Ability to turn websocket compression on/off via the config option server.enableWebsocketCompression. This is useful if your server strips HTTP headers and you do not have access to change that behavior.\n🗝️ Out-of-the-box support for CSRF protection using the Cookie-to-header token technique. This means that if you're serving your Streamlit app from multiple replicas you'll need to configure them to to use the same cookie secret with the server.cookieSecret config option. To turn XSRF protection off, set server.enableXsrfProtection=false.\nNotable bug fixes:\n🖼️ Added a grace period to the image cache expiration logic in order to fix multiple related bugs where images sent with st.image or st.pyplot were sometimes missing.\nVersion 0.61.0\nRelease date: June 2, 2020\nHighlights:\n📅 Support for date ranges in st.date_picker. See docs for more info, but the TLDR is: just pass a list/tuple as the default date and it will be interpreted as a range.\n🗣️ You can now choose whether st.echo prints the code above or below the output of the echoed block. To learn more, refer to the code_location argument in the docs.\n📦 Improved @st.cache support for Keras models and Tensorflow saved_models.\nVersion 0.60.0\nRelease date: May 18, 2020\nHighlights:\n↕️ Ability to set the height of an st.text_area with the height argument (expressed in pixels). See docs for more.\n🔡 Ability to set the maximimum number of characters allowed in st.text_area or st.text_input. Check out the max_chars argument in the docs.\n🗺️ Better DeckGL support for the H3 geospatial indexing system. So now you can use things like H3HexagonLayer in st.pydeck_chart.\n📦 Improved @st.cache support for PyTorch TensorBase and Model.\nVersion 0.59.0\nRelease date: May 05, 2020\nHighlights:\n🎨 New color-picker widget! Use it with st.beta_color_picker()\n🧪 Introducing st.beta_* and st.experimental_* function prefixes, for faster Streamlit feature releases. See docs for more info.\n📦 Improved @st.cache support for SQL Alchemy objects, CompiledFFI, PyTorch Tensors, and builtins.mappingproxy.\nVersion 0.58.0\nRelease date: April 22, 2020\nHighlights:\n💼 Made st.selectbox filtering case-insensitive.\n㈬ Better support for Tensorflow sessions in @st.cache.\n📊 Changed behavior of st.pyplot to auto-clear the figure only when using the global Matplotlib figure (i.e. only when calling st.pyplot() rather than st.pyplot(fig)).\nVersion 0.57.0\nRelease date: March 26, 2020\nHighlights:\n⏲️ Ability to set expiration options for @st.cache'ed functions by setting the max_entries and ttl arguments. See docs.\n🆙 Improved the machinery behind st.file_uploader, so it's much more performant now! Also increased the default upload limit to 200MB (configurable via server.max_upload_size).\n🔒 The server.address config option now binds the server to that address for added security.\n📄 Even more details added to error messages for @st.cache for easier debugging.\nVersion 0.56.0\nRelease date: February 15, 2020\nHighlights:\n📄 Improved error messages for st.cache. The errors now also point to the new caching docs we just released. Read more here!\nBreaking changes:\n🐍 As announced last month, Streamlit no longer supports Python 2. To use Streamlit you'll need Python 3.5 or above.\nVersion 0.55.0\nRelease date: February 4, 2020\nHighlights:\n📺 Ability to record screencasts directly from Streamlit! This allows you to easily record and share explanations about your models, analyses, data, etc. Just click ☰ then \"Record a screencast\". Give it a try!\nVersion 0.54.0\nRelease date: January 29, 2020\nHighlights:\n⌨️ Support for password fields! Just pass type=\"password\" to st.text_input().\nNotable fixes:\n✳️ Numerous st.cache improvements, including better support for complex objects.\n🗣️ Fixed cross-talk in sidebar between multiple users.\nBreaking changes:\nIf you're using the SessionState hack Gist, you should re-download it! Depending on which hack you're using, here are some links to save you some time:\nSessionState.py\nst_state_patch.py\nVersion 0.53.0\nRelease date: January 14, 2020\nHighlights:\n🗺️ Support for all DeckGL features! Just use Pydeck instead of st.deck_gl_chart. To do that, simply pass a PyDeck object to st.pydeck_chart, st.write, or magic.\nNote that as a preview release things may change in the near future. Looking forward to hearing input from the community before we stabilize the API!\nThe goals is for this to replace st.deck_gl_chart, since it is does everything the old API did and much more!\n🆕 Better handling of Streamlit upgrades while developing. We now auto-reload the browser tab if the app it is displaying uses a newer version of Streamlit than the one the tab is running.\n👑 New favicon, with our new logo!\nNotable fixes:\nMagic now works correctly in Python 3.8. It no longer causes docstrings to render in your app.\nBreaking changes:\nUpdated how we calculate the default width and height of all chart types. We now leave chart sizing up to your charting library itself, so please refer to the library's documentation.\nAs a result, the width and height arguments have been deprecated from most chart commands, and use_container_width has been introduced everywhere to allow you to make charts fill as much horizontal space as possible (this used to be the default).\nVersion 0.52.0\nRelease date: December 20, 2019\nHighlights:\n📤 Preview release of the file uploader widget. To try it out just call st.file_uploader!\nNote that as a preview release things may change in the near future. Looking forward to hearing input from the community before we stabilize the API!\n👋 Support for emoji codes in st.write and st.markdown! Try it out with st.write(\"Hello :wave:\").\nBreaking changes:\n🧹 st.pyplot now clears figures by default, since that's what you want 99% of the time. This allows you to create two or more Matplotlib charts without having to call pyplot.clf every time. If you want to turn this behavior off, use st.pyplot(clear_figure=False)\n📣 st.cache no longer checks for input mutations. This is the first change of our ongoing effort to simplify the caching system and prepare Streamlit for the launch of other caching primitives like Session State!\nVersion 0.51.0\nRelease date: November 30, 2019\nHighlights:\n🐕 You can now tweak the behavior of the file watcher with the config option server.fileWatcherType. Use it to switch between:\nauto (default) : Streamlit will attempt to use the watchdog module, and falls back to polling if watchdog is not available.\nwatchdog : Force Streamlit to use the watchdog module.\npoll : Force Streamlit to always use polling.\nnone : Streamlit will not watch files.\nNotable bug fixes:\nFix the \"keyPrefix\" option in static report sharing #724\nAdd support for getColorX and getTargetColorX to DeckGL Chart #718\nFixing Tornado on Windows + Python 3.8 #682\nFall back on webbrowser if xdg-open is not installed on Linux #701\nFixing number input spin buttons for Firefox #683\nFixing CTRL+ENTER on Windows #699\nDo not automatically create credential file when in headless mode #467\nVersion 0.50.1\nRelease date: November 10, 2019\nHighlights:\n👩‍🎓 SymPy support and ability to draw mathematical expressions using LaTeX! See st.latex, st.markdown, and st.write.\n🌄 You can now set config options using environment variables. For example, export STREAMLIT_SERVER_PORT=9876.\n🐱 Ability to call streamlit run directly with Github and Gist URLs. No need to grab the \"raw\" URL first!\n📃 Cleaner exception stack traces. We now remove all Streamlit-specific code from stack traces originating from the user's app.\nVersion 0.49.0\nRelease date: October 23, 2019\nHighlights:\n💯 New input widget for entering numbers with the keyboard: st.number_input()\n📺 Audio/video improvements: ability to load from a URL, to embed YouTube videos, and to set the start position.\n🤝 You can now (once again) share static snapshots of your apps to S3! See the S3 section of streamlit config show to set it up. Then share from top-right menu.\n⚙️ Use server.baseUrlPath config option to set Streamlit's URL to something like http://domain.com/customPath.\nNotable bug fixes:\nFixes numerous Windows bugs, including Issues #339 and #401.\nVersion 0.48.0\nRelease date: October 12, 2019\nHighlights:\n🔧 Ability to set config options as command line flags or in a local config file.\n↕️ You can now maximize charts and images!\n⚡ Streamlit is now much faster when writing data in quick succession to your app.\n✳️ Ability to blacklist folder globs from \"run on save\" and @st.cache hashing.\n🎛️ Improved handling of widget state when Python file is modified.\n🙈 Improved HTML support in st.write and st.markdown. HTML is still unsafe, though!\nNotable bug fixes:\nFixes @st.cache bug related to having your Python environment on current working directory. Issue #242\nFixes loading of root url / on Windows. Issue #244\nVersion 0.47.0\nRelease date: October 1, 2019\nHighlights:\n🌄 New hello.py showing off 4 glorious Streamlit apps. Try it out!\n🔄 Streamlit now automatically selects an unused port when 8501 is already in use.\n🎁 Sidebar support is now out of beta! Just start any command with st.sidebar. instead of st.\n⚡ Performance improvements: we added a cache to our websocket layer so we no longer re-send data to the browser when it hasn't changed between runs\n📈 Our \"native\" charts st.line_chart, st.area_chart and st.bar_chart now use Altair behind the scenes\n🔫 Improved widgets: custom st.slider labels; default values in multiselect\n🕵️‍♀️ The filesystem watcher now ignores hidden folders and virtual environments\n💅 Plus lots of polish around caching and widget state management\nBreaking change:\n🛡️ We have temporarily disabled support for sharing static \"snapshots\" of Streamlit apps. Now that we're no longer in a limited-access beta, we need to make sure sharing is well thought through and abides by laws like the DMCA. But we're working on a solution!\nVersion 0.46.0\nRelease date: September 19, 2019\nHighlights:\n✨ Magic commands! Use st.write without typing st.write. See https://docs.streamlit.io/en/latest/api.html#magic-commands\n🎛️ New st.multiselect widget.\n🐍 Fixed numerous install issues so now you can use pip install streamlit even in Conda! We've therefore deactivated our Conda repo.\n🐞 Multiple bug fixes and additional polish in preparation for our launch!\nBreaking change:\n🛡️ HTML tags are now blacklisted in st.write/st.markdown by default. More information and a temporary work-around at: https://github.com/streamlit/streamlit/issues/152\nVersion 0.45.0\nRelease date: August 28, 2019\nHighlights:\n😱 Experimental support for sidebar! Let us know if you want to be a beta tester.\n🎁 Completely redesigned st.cache! Much more performant, has a cleaner API, support for caching functions called by @st.cached functions, user-friendly error messages, and much more!\n🖼️ Lightning fast st.image, ability to choose between JPEG and PNG compression, and between RGB and BGR (for OpenCV).\n💡 Smarter API for st.slider, st.selectbox, and st.radio.\n🤖 Automatically fixes the Matplotlib backend -- no need to edit .matplotlibrc\nVersion 0.44.0\nRelease date: July 28, 2019\nHighlights:\n⚡ Lightning-fast reconnect when you do a ctrl-c/rerun on your Streamlit code\n📣 Useful error messages when the connection fails\n💎 Fixed multiple bugs and improved polish of our newly-released interactive widgets\nVersion 0.43.0\nRelease date: July 9, 2019\nHighlights:\n⚡ Support for interactive widgets! 🎈🎉\nVersion 0.42.0\nRelease date: July 1, 2019\nHighlights:\n💾 Ability to save Vega-Lite and Altair charts to SVG or PNG\n🐇 We now cache JS files in your browser for faster loading\n⛔ Improvements to error-handling inside Streamlit apps\nVersion 0.41.0\nRelease date: June 24, 2019\nHighlights:\n📈 Greatly improved our support for named datasets in Vega-Lite and Altair\n🙄 Added ability to ignore certain folders when watching for file changes. See the server.folderWatchBlacklist config option.\n☔ More robust against syntax errors on the user's script and imported modules\nVersion 0.40.0\nRelease date: June 10, 2019\nHighlights:\nStreamlit is more than 10x faster. Just save and watch your analyses update instantly.\nWe changed how you run Streamlit apps: $ streamlit run your_script.py [script args]\nUnlike the previous versions of Streamlit, streamlit run [script] [script args] creates a server (now you don't need to worry if the proxy is up). To kill the server, all you need to do is hit Ctrl+c.\nWhy is this so much faster?\nNow, Streamlit keeps a single Python session running until you kill the server. This means that Streamlit can re-run your code without kicking off a new process; imported libraries are cached to memory. An added bonus is that st.cache now caches to memory instead of to disk.\nWhat happens if I run Streamlit the old way?\nIf you run $ python your_script.py the script will execute from top to bottom, but won't produce a Streamlit app.\nWhat are the limitations of the new architecture?\nTo switch Streamlit apps, first you have to kill the Streamlit server with Ctrl-c. Then, you can use streamlit run to generate the next app.\nStreamlit only works when used inside Python files, not interactively from the Python REPL.\nWhat else do I need to know?\nThe strings we print to the command line when liveSave is on have been cleaned up. You may need to adjust any RegEx that depends on those.\nA number of config options have been renamed:\nOld configNew config\nproxy.isRemoteserver.headless\nproxy.liveSaveserver.liveSave\nproxy.runOnSaveserver.runOnSave\nproxy.watchFileSystemserver.runOnSave\nproxy.enableCORSserver.enableCORS\nproxy.portserver.port\nbrowser.proxyAddressbrowser.serverAddress\nbrowser.proxyPortbrowser.serverPort\nclient.waitForProxySecsn/a\nclient.throttleSecsn/a\nclient.tryToOutliveProxyn/a\nclient.proxyAddressn/a\nclient.proxyPortn/a\nproxy.autoCloseDelaySecsn/a\nproxy.reportExpirationSecsn/a\nWhat if something breaks?\nIf the new Streamlit isn't working, please let us know by Slack or email. You can downgrade at any time with these commands:\npip install --upgrade streamlit==0.37\nconda install streamlit=0.37\nWhat's next?\nThank you for staying with us on this journey! This version of Streamlit lays the foundation for interactive widgets, a new feature of Streamlit we're really excited to share with you in the next few months.\nVersion 0.36.0\nRelease date: May 03, 2019\nHighlights\n🚣‍♀️ st.progress() now also accepts floats from 0.0–1.0\n🤯 Improved rendering of long headers in DataFrames\n🔐 Shared apps now default to HTTPS\nVersion 0.35.0\nRelease date: April 26, 2019\nHighlights\n📷 Bokeh support! Check out docs for st.bokeh_chart\n⚡️ Improved the size and load time of saved apps\n⚾️ Implemented better error-catching throughout the codebase\nWas this page helpful?\nthumb_up\nYes\nthumb_down\nNo\nedit\nSuggest edits\nforum\nStill have questions?\nOur forums are full of helpful information and Streamlit experts.\nPrevious:\nRoadmap\nNext:\nCheat sheet\nHome\nContact Us\nCommunity\nCopyright © 2023, Streamlit Inc."
"name": "Cheat sheet",
"url": "https://docs.streamlit.io/library/cheatsheet",
"page": "Documentation\nsearch\nSearch\ndescription\nStreamlit library\nGet started\nadd\nAPI reference\nadd\nAdvanced features\nadd\nComponents\nadd\nRoadmap\nopen_in_new\nChangelog\nCheat sheet\ncloud\nStreamlit Community Cloud\nGet started\nadd\nTrust and Security\nRelease notes\nopen_in_new\nTroubleshooting\nschool\nKnowledge base\nTutorials\nadd\nUsing Streamlit\nStreamlit Components\nInstalling dependencies\nDeployment issues\nHome/\nStreamlit library/\nCheat sheet\nCheat Sheet\nThis is a summary of the docs, as of Streamlit v1.22.0.\nInstall & Import\nstreamlit run first_app.py\n# Import convention\n>>> import streamlit as st\nCommand line\nstreamlit --help\nstreamlit run your_script.py\nstreamlit hello\nstreamlit config show\nstreamlit cache clear\nstreamlit docs\nstreamlit --version\nPre-release features\npip uninstall streamlit\npip install streamlit-nightly --upgrade\nLearn more about experimental features\nMagic commands\n# Magic commands implicitly\n# call st.write().\n'_This_ is some **Markdown***'\nmy_variable\n'dataframe:', my_data_frame\nDisplay text\nst.text('Fixed width text')\nst.markdown('_Markdown_') # see *\nst.latex(r''' e^i\\pi + 1 = 0 ''')\nst.write('Most objects') # df, err, func, keras!\nst.write(['st', 'is <', 3]) # see *\nst.title('My title')\nst.header('My header')\nst.subheader('My sub')\nst.code('for i in range(8): foo()')\n* optional kwarg unsafe_allow_html = True\nDisplay data\nst.dataframe(my_dataframe)\nst.table(data.iloc[0:10])\nst.json('foo':'bar','fu':'ba')\nst.metric('My metric', 42, 2)\nDisplay media\nst.image('./header.png')\nst.audio(data)\nst.video(data)\nAdd widgets to sidebar\n# Just add it after st.sidebar:\n>>> a = st.sidebar.radio('Select one:', [1, 2])\n# Or use \"with\" notation:\n>>> with st.sidebar:\n>>> st.radio('Select one:', [1, 2])\nColumns\n# Two equal columns:\n>>> col1, col2 = st.columns(2)\n>>> col1.write(\"This is column 1\")\n>>> col2.write(\"This is column 2\")\n# Three different columns:\n>>> col1, col2, col3 = st.columns([3, 1, 1])\n# col1 is larger.\n# You can also use \"with\" notation:\n>>> with col1:\n>>> st.radio('Select one:', [1, 2])\nTabs\n# Insert containers separated into tabs:\n>>> tab1, tab2 = st.tabs([\"Tab 1\", \"Tab2\"])\n>>> tab1.write(\"this is tab 1\")\n>>> tab2.write(\"this is tab 2\")\n# You can also use \"with\" notation:\n>>> with tab1:\n>>> st.radio('Select one:', [1, 2])\nControl flow\n# Stop execution immediately:\nst.stop()\n# Rerun script immediately:\nst.experimental_rerun()\n# Group multiple widgets:\n>>> with st.form(key='my_form'):\n>>> username = st.text_input('Username')\n>>> password = st.text_input('Password')\n>>> st.form_submit_button('Login')\nDisplay interactive widgets\nst.button('Click me')\nst.experimental_data_editor('Edit data', data)\nst.checkbox('I agree')\nst.radio('Pick one', ['cats', 'dogs'])\nst.selectbox('Pick one', ['cats', 'dogs'])\nst.multiselect('Buy', ['milk', 'apples', 'potatoes'])\nst.slider('Pick a number', 0, 100)\nst.select_slider('Pick a size', ['S', 'M', 'L'])\nst.text_input('First name')\nst.number_input('Pick a number', 0, 10)\nst.text_area('Text to translate')\nst.date_input('Your birthday')\nst.time_input('Meeting time')\nst.file_uploader('Upload a CSV')\nst.download_button('Download file', data)\nst.camera_input(\"Take a picture\")\nst.color_picker('Pick a color')\n# Use widgets' returned values in variables:\n>>> for i in range(int(st.number_input('Num:'))):\n>>> foo()\n>>> if st.sidebar.selectbox('I:',['f']) == 'f':\n>>> b()\n>>> my_slider_val = st.slider('Quinn Mallory', 1, 88)\n>>> st.write(slider_val)\n# Disable widgets to remove interactivity:\n>>> st.slider('Pick a number', 0, 100, disabled=True)\nMutate data\n# Add rows to a dataframe after\n# showing it.\n>>> element = st.dataframe(df1)\n>>> element.add_rows(df2)\n# Add rows to a chart after\n# showing it.\n>>> element = st.line_chart(df1)\n>>> element.add_rows(df2)\nDisplay code\n>>> with st.echo():\n>>> st.write('Code will be executed and printed')\nPlaceholders, help, and options\n# Replace any single element.\n>>> element = st.empty()\n>>> element.line_chart(...)\n>>> element.text_input(...) # Replaces previous.\n# Insert out of order.\n>>> elements = st.container()\n>>> elements.line_chart(...)\n>>> st.write(\"Hello\")\n>>> elements.text_input(...) # Appears above \"Hello\".\nst.help(pandas.DataFrame)\nst.get_option(key)\nst.set_option(key, value)\nst.set_page_config(layout='wide')\nst.experimental_show(objects)\nst.experimental_get_query_params()\nst.experimental_set_query_params(**params)\nConnect to data sources\nst.experimental_connection('pets_db', type='sql')\nconn = st.experimental_connection('sql')\nconn = st.experimental_connection('snowpark')\n>>> class MyConnection(ExperimentalBaseConnection[myconn.MyConnection]):\n>>> def _connect(self, **kwargs) -> MyConnection:\n>>> return myconn.connect(**self._secrets, **kwargs)\n>>> def query(self, query):\n>>> return self._instance.query(query)\nOptimize performance\nCache data objects\n# E.g. Dataframe computation, storing downloaded data, etc.\n>>> @st.cache_data\n... def foo(bar):\n... # Do something expensive and return data\n... return data\n# Executes foo\n>>> d1 = foo(ref1)\n# Does not execute foo\n# Returns cached item by value, d1 == d2\n>>> d2 = foo(ref1)\n# Different arg, so function foo executes\n>>> d3 = foo(ref2)\n# Clear all cached entries for this function\n>>> foo.clear()\n# Clear values from *all* in-memory or on-disk cached functions\n>>> st.cache_data.clear()\nCache global resources\n# E.g. TensorFlow session, database connection, etc.\n>>> @st.cache_resource\n... def foo(bar):\n... # Create and return a non-data object\n... return session\n# Executes foo\n>>> s1 = foo(ref1)\n# Does not execute foo\n# Returns cached item by reference, s1 == s2\n>>> s2 = foo(ref1)\n# Different arg, so function foo executes\n>>> s3 = foo(ref2)\n# Clear all cached entries for this function\n>>> foo.clear()\n# Clear all global resources from cache\n>>> st.cache_resource.clear()\nDeprecated caching\n>>> @st.cache\n... def foo(bar):\n... # Do something expensive in here...\n... return data\n>>> # Executes foo\n>>> d1 = foo(ref1)\n>>> # Does not execute foo\n>>> # Returns cached item by reference, d1 == d2\n>>> d2 = foo(ref1)\n>>> # Different arg, so function foo executes\n>>> d3 = foo(ref2)\nDisplay progress and status\n>>> with st.spinner(text='In progress'):\n>>> time.sleep(5)\n>>> st.success('Done')\nst.progress(progress_variable_1_to_100)\nst.balloons()\nst.snow()\nst.error('Error message')\nst.warning('Warning message')\nst.info('Info message')\nst.success('Success message')\nst.exception(e)\nPersonalize apps for users\n# Show different content based on the user's email address.\n>>> if st.user.email == 'jane@email.com':\n>>> display_jane_content()\n>>> elif st.user.email == 'adam@foocorp.io':\n>>> display_adam_content()\n>>> else:\n>>> st.write(\"Please contact us to get access!\")\nWas this page helpful?\nthumb_up\nYes\nthumb_down\nNo\nedit\nSuggest edits\nforum\nStill have questions?\nOur forums are full of helpful information and Streamlit experts.\nPrevious:\nChangelog\nNext:\nStreamlit Community Cloud\nHome\nContact Us\nCommunity\nCopyright © 2023, Streamlit Inc."
"url": "https://docs.streamlit.io/streamlit-community-cloud/get-started",
"page": "Documentation\nsearch\nSearch\ndescription\nStreamlit library\nGet started\nadd\nAPI reference\nadd\nAdvanced features\nadd\nComponents\nadd\nRoadmap\nopen_in_new\nChangelog\nCheat sheet\ncloud\nStreamlit Community Cloud\nGet started\nremove\nDeploy an app\nadd\nShare your app\nadd\nManage your app\nTrust and Security\nRelease notes\nopen_in_new\nTroubleshooting\nschool\nKnowledge base\nTutorials\nadd\nUsing Streamlit\nStreamlit Components\nInstalling dependencies\nDeployment issues\nHome/\nStreamlit Community Cloud/\nGet started\nGet started\nWelcome to Streamlit Community Cloud! First things first, before you get started with Streamlit Community Cloud, you need to have a Streamlit app to deploy. If you haven't built one yet, read our Get started docs or start with an Example app. Either way, it only takes a few minutes to create your first app.\nHow Streamlit Community Cloud works\nStreamlit Community Cloud is a workspace for your team to deploy, manage, and collaborate on your Streamlit apps. You connect your Streamlit Community Cloud account directly to your GitHub repository (public or private) and then Streamlit Community Cloud launches the apps directly from the code you've stored on GitHub. Most apps will launch in only a few minutes, and any time you update the code on GitHub, your app will automatically update for you. This creates a fast iteration cycle for your deployed apps, so that developers and viewers of apps can rapidly prototype, explore, and update apps.\nUnder the hood Streamlit Community Cloud handles all of the containerization, authentication, scaling, security and everything else so that all you need to worry about is creating the app. Maintaining Streamlit apps is easy. Containers get the latest security patches, are actively monitored for container health. We are also building the capability to observe and monitor apps.\nGetting started\nGetting your workspace set up with Streamlit Community Cloud only takes a few minutes.\nSign up for Streamlit Community Cloud\nLog in to your account\nConnect your Streamlit Community Cloud account to GitHub\nExplore your Streamlit Community Cloud workspace\nInvite other developers on your team\nSign up for Streamlit Community Cloud\nStreamlit's Community Cloud allows you to deploy, manage, and share your apps with the world, directly from Streamlit — all for free. Sign up on the Community Cloud homepage.\nOnce you've signed up, login to share.streamlit.io and follow the steps below.\nLog in to share.streamlit.io\nYou can login to Streamlit Community Cloud with:\nGoogle\nGitHub\nEmail based sign-in link: These are single-use links that are valid for up to 15 minutes.\nIf you're a developer, we recommend starting with GitHub the first time you login. You can later setup your account to login using Google.\nIf you're sharing your app, your app's users can use any of the above methods to login.\nSign in with Google\nVisit share.streamlit.io and click the \"Continue with Google\" button.\nStep 1: Click the 'Continue with Google' button\nOn the next page, choose an account to sign in with and enter your Google account credentials.\nStep 2: Enter your Google account credentials\nOnce you have signed in to Google, you will be taken to your Streamlit Community Cloud workspace!🎈\nYour Streamlit Community Cloud workspace\nSign in with GitHub\nVisit share.streamlit.io and click the \"Continue with GitHub\" button.\nStep 1: Click the 'Continue with GitHub' button\nOn the next page, enter your GitHub credentials to sign in.\nStep 2: Enter your GitHub account credentials\nOnce you have signed in to GitHub, you will be taken to your Streamlit Community Cloud workspace!🎈\nYour Streamlit Community Cloud workspace\nSign in with Email\nIf you don't have SSO, you can sign in with your email address! Visit share.streamlit.io, enter the email address you used to sign up for Streamlit Community Cloud, and click the \"Continue with email\" button.\nStep 1: Enter your email address and click 'Continue with email'\nOnce you do so, you will see a confirmation message (like the one below) asking you to check your email.\nStep 2: Check your inbox for an email from Streamlit\nCheck your inbox for an email from Streamlit, with the subject \"Sign in to Streamlit Community Cloud\". Click the link in the email to sign in to Streamlit. Note that this link will expire in 15 minutes and can only be used once.\nStep 3: Click the link in the email to sign in to Streamlit\nOnce you click the link in your email, you will be taken to your Streamlit Community Cloud workspace!🎈\nYour Streamlit Community Cloud workspace\nConnect your GitHub account\nNext you need to authorize Streamlit to connect to your GitHub account. This lets your Streamlit Community Cloud workspace launch apps directly from the app files you store in your repos, as well as let the system check for updates to those app files so that your apps can automatically update. You will see two different authorization screens to give this access. Click \"authorize\" on both. Questions about GitHub permissions? Read more here!\npriority_high\nImportant\nYou must have admin permissions to your repo in order to deploy apps. If you don't have admin access, talk to your IT team or manager about helping you set up your Streamlit Community Cloud account or reach out to us on the Community forum.\nAuthorization screen 1\nAuthorization screen 2\npush_pin\nNote\nOnce a user is added to a repository on GitHub, it will take at most 15 minutes before they can deploy the app on Cloud. If a user is removed from a repository on GitHub, it will take at most 15 minutes before their permissions to manage the app from that repository are revoked.\nExplore your Streamlit Community Cloud workspace\nCongrats! You are now logged in and ready to go. If you are joining someone else's workspace you may already see apps populated in your workspace. If not, then you need to deploy an app! Check out our next section on how to deploy an app. And if you need an app to deploy check out our example apps that include apps for machine learning, data science, and business use cases.\nYou may also find that you already have multiple Streamlit Community Cloud workspaces. Streamlit Community Cloud automatically groups your apps according to the corresponding GitHub repository's owner. In the upper right corner you can see the workspaces you have access to. If your team has already launched apps, then you will see those apps in your workspace. Read more about workspaces here.\nInvite other developers to your workspace\nInviting other developers is simple, just invite them to your GitHub repository so that you can code on apps together, and then have them log in to share.streamlit.io. If you are working as a team, you likely are already in the same repos, so skip step 1 and go straight to having them log into share.streamlit.io\nStreamlit Community Cloud inherits developer permissions from GitHub, so when your teammates log in, they will automatically view the workspaces you share. From there you can all deploy, manage, and share apps together.\nAnd remember, whenever anyone on the team updates the code on GitHub, the app will also automatically update for you!\nWas this page helpful?\nthumb_up\nYes\nthumb_down\nNo\nedit\nSuggest edits\nforum\nStill have questions?\nOur forums are full of helpful information and Streamlit experts.\nPrevious:\nStreamlit Community Cloud\nNext:\nDeploy an app\nHome\nContact Us\nCommunity\nCopyright © 2023, Streamlit Inc."
"name": "Trust and Security",
"url": "https://docs.streamlit.io/streamlit-community-cloud/trust-and-security",
"page": "Documentation\nsearch\nSearch\ndescription\nStreamlit library\nGet started\nadd\nAPI reference\nadd\nAdvanced features\nadd\nComponents\nadd\nRoadmap\nopen_in_new\nChangelog\nCheat sheet\ncloud\nStreamlit Community Cloud\nGet started\nadd\nTrust and Security\nRelease notes\nopen_in_new\nTroubleshooting\nschool\nKnowledge base\nTutorials\nadd\nUsing Streamlit\nStreamlit Components\nInstalling dependencies\nDeployment issues\nHome/\nStreamlit Community Cloud/\nTrust and Security\nStreamlit Trust and Security\nStreamlit is a framework that turns Python scripts into interactive apps, giving data scientists the ability to quickly create data and model-based apps for the entire company.\nA simple Streamlit app is:\nimport streamlit as st\nnumber = st.slider(\"Pick a number: \", min_value=1, max_value=10)\nst.text(\"Your number is \" + str(number))\nWhen you streamlit run my_app.py, you start a web server that runs the interactive application on your local computer at http://localhost:8501. This is great for local development. When you want to share with your colleagues, Streamlit Community Cloud enables you to deploy and run these applications in the cloud. Streamlit Community Cloud handles all the details of scaling, reliability, and security as well as providing you an interface for easily managing your deployed apps.\nThis document is an overview of how we provide best-in-industry security for you. We'll cover all the important areas in the lifecycle of your data:\nProduct Security: how we ensure only you can create and view apps that access your data\nNetwork and Application Security: how we ensure your data is protected when it is in our cloud\nOngoing Operations: how we stay good stewards of security best practices\nProduct Security\nSSO\nAll access and sign-ins to Streamlit are conducted via an SSO provider: GitHub and GSuite. We do not store customer passwords.\nCredential Storage\nWe encrypt sensitive customer data (e.g. secrets, authentication tokens) at-rest with AES256 as described in Google's documentation.\nPermissions and Role-Based Access Control\nOur permission levels inherit from the permissions you have assigned in GitHub. Users with write access to a GitHub repository for a given app will be able to make changes in the Streamlit administrative console.\nOnly users with admin access to a repository are able to deploy and delete apps.\nNetwork and Application Security\nData Hosting\nOur physical infrastructure is hosted and managed within Google Cloud Platform (GCP) using their secure data centers. Streamlit leverages many of the platform's built-in security, privacy, and redundancy features. GCP continually monitors its data centers for risk and undergoes assessments to ensure compliance with industry standards. GCP's data centers have numerous accreditations, including ISO-27001, SOC 1 and SOC 2.\nVirtual Private Cloud\nAll of our servers are within a virtual private cloud (VPC) with firewalls and network access control lists (ACLs) to allow external access to a select few API endpoints; all other internal services are only accessible within the VPC.\nEncryption\nAll Streamlit apps are served entirely over HTTPS. All data sent to or from Streamlit over the public internet is encrypted in transit using 256-bit encryption. Our API and application endpoints are TLS only (v1.2). We use only strong cipher suites and HTTP Strict Transport Security (HSTS) to ensure browsers interact with Streamlit apps over HTTPS. We also encrypt data at rest using AES-256.\nPermissions and Authentication\nAccess to customer data is limited to authorized employees who require it for their job. We run a zero-trust corporate network so there are no corporate resources or additional privileges gained from being on Streamlit's internal network. We utilize single sign-on, 2-factor authentication (2FA), and enforce strong password policies to ensure access to all cloud-related services are protected.\nIncident Response\nWe have an internal protocol for handling security events which includes escalation procedures, rapid mitigation, and documented post-mortems. We notify customers promptly and publicize security advisories at https://streamlit.io/advisories.\nPenetration Testing\nStreamlit uses third-party security tools to scan for vulnerabilities on a regular basis. Our security partners conduct periodic, intensive penetration tests on the Streamlit platform. Our product development team immediately responds to any identified issues or potential vulnerabilities to ensure the quality and security of Streamlit applications.\nSecurity and Compliance Programs\nPeople\nBackground Checks\nAll Streamlit employees go through a thorough background check before hiring.\nTraining\nWe take a least-privilege approach to the access and handling of data. While we retain a minimal amount of customer data and limit internal access on a need-to-know basis, all employees are required to review related security policies and are trained on proper data handling to ensure they uphold our strict commitment to the privacy and security of your data.\nConfidentiality\nAll employees sign a confidentiality agreement before they start at Streamlit.\nVulnerability Control\nVulnerability Management\nWe keep our systems up-to-date with the latest security patches and continuously monitor for new vulnerabilities through compliance and security mailing lists. This includes automatic scanning of our code repositories for vulnerable dependencies.\npush_pin\nNote\nIf you have further questions about Community Cloud and our security approach, please reach out to us on the Community forum.\nWas this page helpful?\nthumb_up\nYes\nthumb_down\nNo\nedit\nSuggest edits\nforum\nStill have questions?\nOur forums are full of helpful information and Streamlit experts.\nPrevious:\nGet started\nNext:\nRelease notes\nHome\nContact Us\nCommunity\nCopyright © 2023, Streamlit Inc."
"name": "Release notes",
"url": "https://streamlit-cloud-release-notes-app-main-jfmm83.streamlit.app/",
"name": "Troubleshooting",
"url": "https://docs.streamlit.io/streamlit-community-cloud/troubleshooting",
"page": "Documentation\nsearch\nSearch\ndescription\nStreamlit library\nGet started\nadd\nAPI reference\nadd\nAdvanced features\nadd\nComponents\nadd\nRoadmap\nopen_in_new\nChangelog\nCheat sheet\ncloud\nStreamlit Community Cloud\nGet started\nadd\nTrust and Security\nRelease notes\nopen_in_new\nTroubleshooting\nschool\nKnowledge base\nTutorials\nadd\nUsing Streamlit\nStreamlit Components\nInstalling dependencies\nDeployment issues\nHome/\nStreamlit Community Cloud/\nTroubleshooting\nTroubleshooting\nSorry to hear you're having issues! Please take a look at some frequently asked questions and issues below. If you cannot find an answer to your issue, please post on our Community forum so that our engineers or community members can help you.\nTable of contents\nGeneral help\nDeploying apps\nSharing and accessing apps\nData and app security\nGitHub integration\nLimitations and known issues\nGeneral help\nHow can I get help with my app?\nIf you have any questions, feedback, run into any issues, or need to reach us, you can ask on our Community forum. This is best suited for any questions related to the open source library and Community Cloud - debugging code, deployment, resource limits, etc.\nDeploying apps\nMy repo isn't showing on the Deploy page\nIt's possible it just isn't showing up even though it is already there. Try typing it in. If we don't recognize it, you'll see the message below with a link to click and give access.\nIf for some reason that doesn't work, please try logging out and back in again to make sure the change took effect. And if that doesn't work - please let us know and we'll get you sorted!\nIt won't let me deploy the app\nTo deploy an app for the first time you must have admin-level access to the repo in GitHub. Please check with your administrator to make sure you have that access. If not, please ask them to deploy for the first time (we need this in order to establish webhooks for continuous integration) and from there you can then push updates to the app.\nI need to set a specific Python version for my app\nWhen deploying an app, under advanced settings, you can choose which version of Python you wish your app to use.\nHow do I store files locally?\nIf you want to store your data locally as opposed to in a database, you can store the file in your GitHub repository. Streamlit is just python, so you can read the file using:\npandas.read_csv(\"data.csv\") or open(\"data.csv\")\nstar\nTip\nIf you have really big or binary data that you change frequently, and git is feeling slow, you might want to check out Git Large File Store (LFS) as a better way to store large files in GitHub. You don't need to make any changes to your app to start using it. If your GitHub repo uses LFS, it will now just work with Streamlit.\nMy app is running into issues while deploying\nCheck your Cloud logs by clicking on the \"Manage app\" expander in the bottom right corner of your screen. Often the trouble is due to a dependency not being declared. See here for more information on dependency management.\nIf that's not the issue, then please send the logs and warning you are seeing to our Community forum and we'll help get you sorted!\nMy app is hitting resource limits / my app is running very slowly\nIf your app is running slowly or you're hitting the 'Argh' page, we first highly recommend going through and implementing the suggestions in the following blog posts to prevent your app from hitting the resource limits and to detect if your Streamlit app leaks memory:\nCommon app problems: Resource limits\n3 steps to fix app memory leaks\nIf you're still having issues, click here to learn more about resource limits.\nCan I get a custom URL for my app?\nYes! You can find instructions for setting a custom subdomain here.\nSharing and accessing apps\nI don't have SSO. How do I sign in to Streamlit?\nDon't have SSO? No problem! You can sign in to Streamlit with your email address. Click here for step-by-step instructions on how to sign in with email.\nHow do I add viewers to my Streamlit apps?\nViewer auth allows you to restrict the viewers of your private app. To access your app, users have to authenticate using an email-based passwordless login or Google OAuth. To learn more about how to share your public and private apps with viewers, click here.\nDo viewers need access to the GitHub repo?\nNope! You only need access to the GitHub repo if you want to push changes to the app.\nWhat will unauthorized/logged out viewers see when they view my app?\nA 404 error is displayed to unauthorized viewers to avoid providing any unnecessary information about your app to unintended viewers. Users who satisfy any of the following conditions will see a 404 error when attempting to view your app after you have configured viewer auth:\nUser is not logged in with Google SSO.\nUser is not included in the list of viewers provided in the app settings.\nUser lacks read access to your app's GitHub repo.\nUser has read access to your app's GitHub repo but is not enrolled in Community Cloud.\nI've added someone to the viewer list but they still see a 404 error when attempting to view the app\nIf a user is still seeing a 404 error after their email address has been added to the viewer list, we recommend that you:\nCheck that the user did not log into a different Google account via Single Sign-On (if you have added their work email address to the viewer list, ask the user to check that they are not logged into their personal Google account, and vice versa).\nCheck that the user has navigated to the correct URL.\nCheck that the user's email address has been entered correctly in the viewer list.\nReach out on our Community forum and we will be happy to help.\nData and app security\nHow will Streamlit secure my data?\nStreamlit takes a number of industry best-practice measures to ensure your code, data, and apps are all secure. Read more in our Trust and Security memo.\nHow do I set up SSO for my organization?\nCommunity Cloud uses Google OAuth, by default. If you use Google for authentication you're all set.\nBilling and administration\nThe Community Cloud is a free service. You don't have to worry about setting up billing or being charged.\nGitHub integration\nWhy does Streamlit require additional OAuth scope?\nIn order to deploy your app, Streamlit requires access to your app's source code in GitHub and also the ability to manage the public keys associated with the repositories. The default GitHub OAuth scopes are sufficient to work with apps in public GitHub repositories. However, in order to work with apps in private GitHub repositories, Streamlit requires the additional repo OAuth scope from GitHub. We recognize that this scope provides Streamlit with extra permissions that we do not really need, and which, as people who prize security, we'd rather not even be granted. Alas, we need to work with the APIs we are provided by GitHub.\nAfter deploying my private-repo app, I received an email from GitHub saying a new public key was added to my repo. Is this expected?\nThis is the expected behavior. When you try to deploy an app that lives in a private repo, Streamlit Community Cloud needs to get access to that repo somehow. For this, we create a read-only GitHub Deploy Key then access your repo using a public SSH key. When we set this up, GitHub notifies admins of the repo that the key was created as a security measure.\nWhat happens when a user's permissions change on GitHub?\nOnce a user is added to a repository on GitHub, it will take at most 15 minutes before they can deploy the app on Cloud. If a user is removed from a repository on GitHub, it will take at most 15 minutes before their permissions to manage the app from that repository are revoked.\nLimitations and known issues\nHere are some limitations and known issues that we're actively working to resolve. If you find an issue please let us know!\nWhen you print something to the Cloud logs, you may need to do a sys.stdout.flush() before it shows up.\nApps execute in a Linux environment running Debian Buster (slim) with Python 3.7. There is no way to change these, and we may upgrade the environment at any point. If we do upgrade it, we will usually not touch existing apps, so they'll continue to work as expected. But if there's a critical fix in the update, we may force-upgrade all apps.\nMatplotlib doesn't work well with threads. So if you're using Matplotlib you should wrap your code with locks as shown in the snippet below. This Matplotlib bug is more prominent when you share your app apps since you're more likely to get more concurrent users then.\nfrom matplotlib.backends.backend_agg import RendererAgg\n_lock = RendererAgg.lock\nwith _lock:\nfig.title('This is a figure)')\nfig.plot([1,20,3,40])\nst.pyplot(fig)\nAll apps are hosted in the United States. This is currently not configurable.\nWas this page helpful?\nthumb_up\nYes\nthumb_down\nNo\nedit\nSuggest edits\nforum\nStill have questions?\nOur forums are full of helpful information and Streamlit experts.\nPrevious:\nRelease notes\nNext:\nKnowledge base\nHome\nContact Us\nCommunity\nCopyright © 2023, Streamlit Inc."
"name": "Tutorials",
"url": "https://docs.streamlit.io/knowledge-base/tutorials",
"page": "Documentation\nsearch\nSearch\ndescription\nStreamlit library\nGet started\nadd\nAPI reference\nadd\nAdvanced features\nadd\nComponents\nadd\nRoadmap\nopen_in_new\nChangelog\nCheat sheet\ncloud\nStreamlit Community Cloud\nGet started\nadd\nTrust and Security\nRelease notes\nopen_in_new\nTroubleshooting\nschool\nKnowledge base\nTutorials\nremove\nConnect to data sources\nadd\nDeploy Streamlit apps\nadd\nSession State basics\nUsing Streamlit\nStreamlit Components\nInstalling dependencies\nDeployment issues\nHome/\nKnowledge base/\nTutorials\nTutorials\nOur tutorials include step-by-step examples of building different types of apps in Streamlit.\nConnect to data sources\nSession State basics\nDeploy Streamlit apps\nWas this page helpful?\nthumb_up\nYes\nthumb_down\nNo\nedit\nSuggest edits\nforum\nStill have questions?\nOur forums are full of helpful information and Streamlit experts.\nPrevious:\nKnowledge base\nNext:\nConnect to data sources\nHome\nContact Us\nCommunity\nCopyright © 2023, Streamlit Inc."
"name": "Using Streamlit",
"url": "https://docs.streamlit.io/knowledge-base/using-streamlit",
"page": "Documentation\nsearch\nSearch\ndescription\nStreamlit library\nGet started\nadd\nAPI reference\nadd\nAdvanced features\nadd\nComponents\nadd\nRoadmap\nopen_in_new\nChangelog\nCheat sheet\ncloud\nStreamlit Community Cloud\nGet started\nadd\nTrust and Security\nRelease notes\nopen_in_new\nTroubleshooting\nschool\nKnowledge base\nTutorials\nadd\nUsing Streamlit\nStreamlit Components\nInstalling dependencies\nDeployment issues\nHome/\nKnowledge base/\nUsing Streamlit\nUsing Streamlit\nHere are some frequently asked questions about using Streamlit. If you feel something important is missing that everyone needs to know, please open an issue or submit a pull request and we'll be happy to review it!\nSanity checks\nBatch elements and input widgets with st.form\nHow do I run my Streamlit script?\nHow can I make Streamlit watch for changes in other modules I'm importing in my app?\nWhat browsers does Streamlit support?\nWhat is the path of Streamlit’s config.toml file?\nWhere does st.file_uploader store uploaded files and when do they get deleted?\nHow do you retrieve the filename of a file uploaded with st.file_uploader?\nHow to remove \"· Streamlit\" from the app title?\nHow to download a file in Streamlit?\nHow to download a Pandas DataFrame as a CSV?\nHow can I make st.pydeck_chart use custom Mapbox styles?\nHow to insert elements out of order?\nHow to animate elements?\nAppend data to a table or chart\nHide row indices when displaying a dataframe\nHow to record a screencast?\nHow do I upgrade to the latest version of Streamlit?\nHow do I hide the hamburger menu from my app?\nWidget updating for every second input when using session state\nHow do I create an anchor link?\nHow do I enable camera access?\nWhy does Streamlit restrict nested st.columns?\nHow to host static files in Streamlit?\nWhat is serializable session state?\nWas this page helpful?\nthumb_up\nYes\nthumb_down\nNo\nedit\nSuggest edits\nforum\nStill have questions?\nOur forums are full of helpful information and Streamlit experts.\nPrevious:\nTutorials\nNext:\nHow to animate elements?\nHome\nContact Us\nCommunity\nCopyright © 2023, Streamlit Inc."
"name": "Streamlit Components",
"url": "https://docs.streamlit.io/knowledge-base/components",
"page": "Documentation\nsearch\nSearch\ndescription\nStreamlit library\nGet started\nadd\nAPI reference\nadd\nAdvanced features\nadd\nComponents\nadd\nRoadmap\nopen_in_new\nChangelog\nCheat sheet\ncloud\nStreamlit Community Cloud\nGet started\nadd\nTrust and Security\nRelease notes\nopen_in_new\nTroubleshooting\nschool\nKnowledge base\nTutorials\nadd\nUsing Streamlit\nStreamlit Components\nInstalling dependencies\nDeployment issues\nHome/\nKnowledge base/\nStreamlit Components\nStreamlit Components\nBelow are some selected questions we've received about Streamlit Components. If you don't find your question here, take a look on the Streamlit community forum via the Components tag.\nHow do Streamlit Components differ from functionality provided in the base Streamlit package?\nWhat types of things aren't possible with Streamlit Components?\nHow do I add a Component to the sidebar?\nMy Component seems to be blinking/stuttering...how do I fix that?\nWas this page helpful?\nthumb_up\nYes\nthumb_down\nNo\nedit\nSuggest edits\nforum\nStill have questions?\nOur forums are full of helpful information and Streamlit experts.\nPrevious:\nUsing Streamlit\nNext:\nHow do I add a Component to the sidebar?\nHome\nContact Us\nCommunity\nCopyright © 2023, Streamlit Inc."
"name": "Installing dependencies",
"url": "https://docs.streamlit.io/knowledge-base/dependencies",
"page": "Documentation\nsearch\nSearch\ndescription\nStreamlit library\nGet started\nadd\nAPI reference\nadd\nAdvanced features\nadd\nComponents\nadd\nRoadmap\nopen_in_new\nChangelog\nCheat sheet\ncloud\nStreamlit Community Cloud\nGet started\nadd\nTrust and Security\nRelease notes\nopen_in_new\nTroubleshooting\nschool\nKnowledge base\nTutorials\nadd\nUsing Streamlit\nStreamlit Components\nInstalling dependencies\nDeployment issues\nHome/\nKnowledge base/\nInstalling dependencies\nInstalling dependencies\nModuleNotFoundError: No module named\nImportError: libGL.so.1: cannot open shared object file: No such file or directory\nERROR: No matching distribution found for\nHow to install a package not on PyPI/Conda but available on GitHub\nInstall the Snowflake Connector for Python on Streamlit Community Cloud\nWas this page helpful?\nthumb_up\nYes\nthumb_down\nNo\nedit\nSuggest edits\nforum\nStill have questions?\nOur forums are full of helpful information and Streamlit experts.\nPrevious:\nStreamlit Components\nNext:\nHow to install a package not on PyPI or Conda but available on GitHub\nHome\nContact Us\nCommunity\nCopyright © 2023, Streamlit Inc."
"name": "Deployment issues",
"url": "https://docs.streamlit.io/knowledge-base/deploy",
"page": "Documentation\nsearch\nSearch\ndescription\nStreamlit library\nGet started\nadd\nAPI reference\nadd\nAdvanced features\nadd\nComponents\nadd\nRoadmap\nopen_in_new\nChangelog\nCheat sheet\ncloud\nStreamlit Community Cloud\nGet started\nadd\nTrust and Security\nRelease notes\nopen_in_new\nTroubleshooting\nschool\nKnowledge base\nTutorials\nadd\nUsing Streamlit\nStreamlit Components\nInstalling dependencies\nDeployment issues\nHome/\nKnowledge base/\nDeployment issues\nDeployment-related questions and errors\nHow do I deploy Streamlit on a domain so it appears to run on a regular port (i.e. port 80)?\nHow can I deploy multiple Streamlit apps on different subdomains?\nHow do I deploy Streamlit on Heroku, AWS, Google Cloud, etc...?\nInvoking a Python subprocess in a deployed Streamlit app\nDoes Streamlit support the WSGI Protocol? (aka Can I deploy Streamlit with gunicorn?)\nArgh. This app has gone over its resource limits.\nApp is not loading when running remotely\nAuthentication without SSO\nI don't have GitHub or GSuite. How do I sign in to Streamlit Community Cloud?\nHow do I share apps with viewers outside my organization?\nUpgrade the Streamlit version of your app on Streamlit Community Cloud\nOrganizing your apps with workspaces on Streamlit Community Cloud\nHow do I increase the upload limit of st.file_uploader on Streamlit Community Cloud?\nHow do I customize my app's subdomain?\nWas this page helpful?\nthumb_up\nYes\nthumb_down\nNo\nedit\nSuggest edits\nforum\nStill have questions?\nOur forums are full of helpful information and Streamlit experts.\nPrevious:\nInstalling dependencies\nNext:\nAuthentication without SSO\nHome\nContact Us\nCommunity\nCopyright © 2023, Streamlit Inc."
]